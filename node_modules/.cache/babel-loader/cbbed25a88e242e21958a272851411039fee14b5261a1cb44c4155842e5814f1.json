{"ast":null,"code":"var _jsxFileName = \"/home/mohit/Downloads/AMRbot_dashboard/src/components/Hconn.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport config from \"../scripts/config\";\nimport Alert from \"react-bootstrap/Alert\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Connection = () => {\n  _s();\n  const [connection, setConnection] = useState(false);\n  const [ros, setRos] = useState(null);\n  useEffect(() => {\n    // This will run once when the component mounts\n    initConnection();\n\n    // Cleanup on component unmount\n    return () => {\n      if (ros) {\n        ros.close();\n      }\n    };\n  }, []); // The empty dependency array ensures it runs only once\n\n  function initConnection() {\n    const newRos = new window.ROSLIB.Ros();\n    setRos(newRos);\n\n    // Attempt to connect\n    try {\n      newRos.connect('ws://' + config.ROSBRIDGE_SERVER_IP + ':9090');\n    } catch (error) {\n      console.error('Error connecting to ROS server:', error);\n      // Handle the connection error\n    }\n\n    // Event handler for when the connection is opened\n    newRos.onopen = () => {\n      console.log('Connection opened.');\n      setConnection(true);\n    };\n\n    // Event handler for when the connection is closed\n    newRos.onclose = () => {\n      setConnection(false);\n    };\n\n    // Event handler for connection errors\n    newRos.onerror = error => {\n      console.error('Connection error:', error);\n      setConnection(false);\n    };\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Alert, {\n      className: \"text-center m-3\",\n      variant: connection ? 'success' : 'danger',\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Connection Status: \", connection ? 'Robot Connected' : 'Robot Disconnected']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(Connection, \"8hTOoiAb20QZ51pFmOhgMjJmlBs=\");\n_c = Connection;\nexport default Connection;\nvar _c;\n$RefreshReg$(_c, \"Connection\");","map":{"version":3,"names":["React","useState","useEffect","config","Alert","jsxDEV","_jsxDEV","Connection","_s","connection","setConnection","ros","setRos","initConnection","close","newRos","window","ROSLIB","Ros","connect","ROSBRIDGE_SERVER_IP","error","console","onopen","log","onclose","onerror","children","className","variant","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/mohit/Downloads/AMRbot_dashboard/src/components/Hconn.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport config from \"../scripts/config\";\nimport Alert from \"react-bootstrap/Alert\";\n\nconst Connection = () => {\n  const [connection, setConnection] = useState(false);\n  const [ros, setRos] = useState(null);\n\n  useEffect(() => {\n    // This will run once when the component mounts\n    initConnection();\n\n    // Cleanup on component unmount\n    return () => {\n      if (ros) {\n        ros.close();\n      }\n    };\n  }, []); // The empty dependency array ensures it runs only once\n\n  function initConnection() {\n    const newRos = new window.ROSLIB.Ros();\n    setRos(newRos);\n\n    // Attempt to connect\n    try {\n      newRos.connect('ws://' + config.ROSBRIDGE_SERVER_IP + ':9090');\n    } catch (error) {\n      console.error('Error connecting to ROS server:', error);\n      // Handle the connection error\n    }\n\n    // Event handler for when the connection is opened\n    newRos.onopen = () => {\n      console.log('Connection opened.');\n      setConnection(true);\n    };\n\n    // Event handler for when the connection is closed\n    newRos.onclose = () => {\n      setConnection(false);\n    };\n\n    // Event handler for connection errors\n    newRos.onerror = (error) => {\n      console.error('Connection error:', error);\n      setConnection(false);\n    };\n  }\n\n  return (\n    <div>\n      <Alert className='text-center m-3' variant={connection ? 'success' : 'danger'}>\n        <p>Connection Status: {connection ? 'Robot Connected' : 'Robot Disconnected'}</p>\n      </Alert>\n    </div>\n  );\n};\n\nexport default Connection;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,mBAAmB;AACtC,OAAOC,KAAK,MAAM,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACU,GAAG,EAAEC,MAAM,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAEpCC,SAAS,CAAC,MAAM;IACd;IACAW,cAAc,CAAC,CAAC;;IAEhB;IACA,OAAO,MAAM;MACX,IAAIF,GAAG,EAAE;QACPA,GAAG,CAACG,KAAK,CAAC,CAAC;MACb;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,SAASD,cAAcA,CAAA,EAAG;IACxB,MAAME,MAAM,GAAG,IAAIC,MAAM,CAACC,MAAM,CAACC,GAAG,CAAC,CAAC;IACtCN,MAAM,CAACG,MAAM,CAAC;;IAEd;IACA,IAAI;MACFA,MAAM,CAACI,OAAO,CAAC,OAAO,GAAGhB,MAAM,CAACiB,mBAAmB,GAAG,OAAO,CAAC;IAChE,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvD;IACF;;IAEA;IACAN,MAAM,CAACQ,MAAM,GAAG,MAAM;MACpBD,OAAO,CAACE,GAAG,CAAC,oBAAoB,CAAC;MACjCd,aAAa,CAAC,IAAI,CAAC;IACrB,CAAC;;IAED;IACAK,MAAM,CAACU,OAAO,GAAG,MAAM;MACrBf,aAAa,CAAC,KAAK,CAAC;IACtB,CAAC;;IAED;IACAK,MAAM,CAACW,OAAO,GAAIL,KAAK,IAAK;MAC1BC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;MACzCX,aAAa,CAAC,KAAK,CAAC;IACtB,CAAC;EACH;EAEA,oBACEJ,OAAA;IAAAqB,QAAA,eACErB,OAAA,CAACF,KAAK;MAACwB,SAAS,EAAC,iBAAiB;MAACC,OAAO,EAAEpB,UAAU,GAAG,SAAS,GAAG,QAAS;MAAAkB,QAAA,eAC5ErB,OAAA;QAAAqB,QAAA,GAAG,qBAAmB,EAAClB,UAAU,GAAG,iBAAiB,GAAG,oBAAoB;MAAA;QAAAqB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5E;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV,CAAC;AAACzB,EAAA,CArDID,UAAU;AAAA2B,EAAA,GAAV3B,UAAU;AAuDhB,eAAeA,UAAU;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}