{"ast":null,"code":"var _jsxFileName = \"/home/mohit/Downloads/AMRbot_dashboard/src/components/Map2.jsx\";\nimport React, { Component } from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport config from \"../scripts/config\";\nimport * as ROSLIB from 'roslib';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass RobotState extends Component {\n  constructor() {\n    super();\n    this.state = {\n      ros: new ROSLIB.Ros(),\n      x: 0,\n      y: 0,\n      orientation: 0,\n      linear_velocity: 0,\n      angular_velocity: 0\n    };\n    this.initConnection();\n  }\n  initConnection() {\n    this.state.ros = new ROSLIB.Ros();\n    try {\n      this.state.ros.connect('ws://' + config.ROSBRIDGE_SERVER_IP + ':9090');\n      this.state.ros.on('connection', () => {\n        console.log('Connected to ROS Bridge.');\n        this.getRobotState();\n        this.setupMapVisualization(); // Add map visualization setup\n      });\n\n      this.state.ros.on('close', () => {\n        console.log('Connection to ROS Bridge closed.');\n      });\n      this.state.ros.on('error', error => {\n        console.error('Error connecting to ROS Bridge:', error);\n      });\n    } catch (error) {\n      console.error('Error connecting to ROS Bridge:', error);\n    }\n  }\n  componentDidMount() {\n    // Don't need to call getRobotState() here since it's already called in the 'connection' event\n    this.getRobotState();\n  }\n  getRobotState() {\n    // ... your existing code for robot state\n\n    // Map subscriber\n    var mapSubscriber = new ROSLIB.Topic({\n      ros: this.state.ros,\n      name: \"/map\",\n      messageType: \"nav_msgs/OccupancyGrid\"\n    });\n    mapSubscriber.subscribe(message => {\n      // Process the map data here if needed\n      console.log('Received map message:', message);\n    });\n  }\n  setupMapVisualization() {\n    // Create a viewer for 2D visualization\n    const viewer = new window.ROS2D.Viewer({\n      divID: 'map-viewer',\n      // ID of the HTML element where the map will be rendered\n      width: 300,\n      height: 300\n    });\n\n    // Add a grid to the viewer (optional)\n    const gridClient = new window.ROS2D.OccupancyGridClient({\n      ros: this.state.ros,\n      topic: '/map',\n      continuous: true,\n      rootObject: viewer.scene,\n      withOrientation: true // Include orientation\n    });\n  }\n\n  // ... your existing methods\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"mt-4\",\n            children: \"Map\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"map-viewer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default RobotState;","map":{"version":3,"names":["React","Component","Row","Col","config","ROSLIB","jsxDEV","_jsxDEV","RobotState","constructor","state","ros","Ros","x","y","orientation","linear_velocity","angular_velocity","initConnection","connect","ROSBRIDGE_SERVER_IP","on","console","log","getRobotState","setupMapVisualization","error","componentDidMount","mapSubscriber","Topic","name","messageType","subscribe","message","viewer","window","ROS2D","Viewer","divID","width","height","gridClient","OccupancyGridClient","topic","continuous","rootObject","scene","withOrientation","render","children","fileName","_jsxFileName","lineNumber","columnNumber","className","id"],"sources":["/home/mohit/Downloads/AMRbot_dashboard/src/components/Map2.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport config from \"../scripts/config\";\nimport * as ROSLIB from 'roslib';\n\n\n\nclass RobotState extends Component {\n  constructor() {\n    super();\n    this.state = {\n      ros: new ROSLIB.Ros(),\n      x: 0,\n      y: 0,\n      orientation: 0,\n      linear_velocity: 0,\n      angular_velocity: 0,\n    };\n    this.initConnection();\n  }\n\n  initConnection() {\n    this.state.ros = new ROSLIB.Ros();\n\n    try {\n      this.state.ros.connect('ws://' + config.ROSBRIDGE_SERVER_IP + ':9090');\n\n      this.state.ros.on('connection', () => {\n        console.log('Connected to ROS Bridge.');\n        this.getRobotState();\n        this.setupMapVisualization(); // Add map visualization setup\n      });\n\n      this.state.ros.on('close', () => {\n        console.log('Connection to ROS Bridge closed.');\n      });\n\n      this.state.ros.on('error', (error) => {\n        console.error('Error connecting to ROS Bridge:', error);\n      });\n    } catch (error) {\n      console.error('Error connecting to ROS Bridge:', error);\n    }\n  }\n\n  componentDidMount() {\n    // Don't need to call getRobotState() here since it's already called in the 'connection' event\n    this.getRobotState();\n  }\n\n  getRobotState() {\n    // ... your existing code for robot state\n\n    // Map subscriber\n    var mapSubscriber = new ROSLIB.Topic({\n      ros: this.state.ros,\n      name: \"/map\",\n      messageType: \"nav_msgs/OccupancyGrid\"\n    });\n\n    mapSubscriber.subscribe((message) => {\n      // Process the map data here if needed\n      console.log('Received map message:', message);\n    });\n  }\n\n  setupMapVisualization() {\n    // Create a viewer for 2D visualization\n    const viewer = new window.ROS2D.Viewer({\n      divID: 'map-viewer', // ID of the HTML element where the map will be rendered\n      width: 300,\n      height: 300\n    });\n\n    // Add a grid to the viewer (optional)\n    const gridClient = new window.ROS2D.OccupancyGridClient({\n      ros: this.state.ros,\n      topic: '/map',\n      continuous: true,\n      rootObject: viewer.scene,\n      withOrientation: true, // Include orientation\n    });\n  }\n\n  // ... your existing methods\n\n  render() {\n    return (\n      <div>\n        <Row>\n          <Col>\n            {/* ... your existing code */}\n          </Col>\n          <Col>\n            <h4 className='mt-4'>Map</h4>\n            <div id=\"map-viewer\"></div>\n          </Col>\n        </Row>\n        {/* ... your existing code */}\n      </div>\n    );\n  }\n}\n\nexport default RobotState;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}