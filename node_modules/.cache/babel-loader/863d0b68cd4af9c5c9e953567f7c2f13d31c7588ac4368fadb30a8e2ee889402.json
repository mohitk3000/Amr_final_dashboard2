{"ast":null,"code":"/**\n * @author Russell Toris - rctoris@wpi.edu\n * @author Lars Kunze - l.kunze@cs.bham.ac.uk\n * @author Raffaello Bonghi - raffaello.bonghi@officinerobotiche.it\n */\n\n/**\n * A navigator can be used to add click-to-navigate options to an object. If\n * withOrientation is set to true, the user can also specify the orientation of\n * the robot by clicking at the goal position and pointing into the desired\n * direction (while holding the button pressed).\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * tfClient (optional) - the TF client\n *   * robot_pose (optional) - the robot topic or TF to listen position\n *   * serverName (optional) - the action server name to use for navigation, like '/move_base'\n *   * actionName (optional) - the navigation action name, like 'move_base_msgs/MoveBaseAction'\n *   * rootObject (optional) - the root object to add the click listeners to and render robot markers to\n *   * withOrientation (optional) - if the Navigator should consider the robot orientation (default: false)\n */\nNAV2D.Navigator = function (options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  var tfClient = options.tfClient || null;\n  var robot_pose = options.robot_pose || \"/robot_pose\";\n  var serverName = options.serverName || \"/move_base\";\n  var actionName = options.actionName || \"move_base_msgs/MoveBaseAction\";\n  var withOrientation = options.withOrientation || false;\n  var use_image = options.image;\n  this.rootObject = options.rootObject || new createjs.Container();\n  this.goalMarker = null;\n  var currentGoal;\n\n  // setup the actionlib client\n  var actionClient = new ROSLIB.ActionClient({\n    ros: ros,\n    actionName: actionName,\n    serverName: serverName\n  });\n\n  /**\n   * Send a goal to the navigation stack with the given pose.\n   *\n   * @param pose - the goal pose\n   */\n  function sendGoal(pose) {\n    // create a goal\n    var goal = new ROSLIB.Goal({\n      actionClient: actionClient,\n      goalMessage: {\n        target_pose: {\n          header: {\n            frame_id: \"map\"\n          },\n          pose: pose\n        }\n      }\n    });\n    goal.send();\n    that.currentGoal = goal;\n\n    // create a marker for the goal\n    if (that.goalMarker === null) {\n      if (use_image && ROS2D.hasOwnProperty(\"ImageNavigator\")) {\n        that.goalMarker = new ROS2D.ImageNavigator({\n          size: 2.5,\n          image: use_image,\n          alpha: 0.7,\n          pulse: true\n        });\n      } else {\n        that.goalMarker = new ROS2D.NavigationArrow({\n          size: 15,\n          strokeSize: 1,\n          fillColor: createjs.Graphics.getRGB(255, 64, 128, 0.66),\n          pulse: true\n        });\n      }\n      that.rootObject.addChild(that.goalMarker);\n    }\n    that.goalMarker.x = pose.position.x;\n    that.goalMarker.y = -pose.position.y;\n    that.goalMarker.rotation = stage.rosQuaternionToGlobalTheta(pose.orientation);\n    that.goalMarker.scaleX = 1.0 / stage.scaleX;\n    that.goalMarker.scaleY = 1.0 / stage.scaleY;\n    goal.on(\"result\", function () {\n      that.rootObject.removeChild(that.goalMarker);\n    });\n  }\n\n  /**\n   * Cancel the currently active goal.\n   */\n  this.cancelGoal = function () {\n    console.log(\"Cancel Goals\");\n    if (typeof that.currentGoal !== \"undefined\") {\n      console.log(that.currentGoal);\n      that.currentGoal.cancel();\n    }\n  };\n\n  // get a handle to the stage\n  var stage;\n  if (that.rootObject instanceof createjs.Stage) {\n    stage = that.rootObject;\n  } else {\n    stage = that.rootObject.getStage();\n  }\n\n  // marker for the robot\n  var robotMarker = null;\n  if (use_image && ROS2D.hasOwnProperty(\"ImageNavigator\")) {\n    robotMarker = new ROS2D.ImageNavigator({\n      size: 2.5,\n      image: use_image,\n      pulse: true\n    });\n  } else {\n    robotMarker = new ROS2D.NavigationArrow({\n      size: 25,\n      strokeSize: 1,\n      fillColor: createjs.Graphics.getRGB(255, 128, 0, 0.66),\n      pulse: true\n    });\n  }\n\n  // wait for a pose to come in first\n  robotMarker.visible = false;\n  this.rootObject.addChild(robotMarker);\n  var initScaleSet = false;\n  var updateRobotPosition = function (pose, orientation) {\n    // update the robots position on the map\n    robotMarker.x = pose.x;\n    robotMarker.y = -pose.y;\n    console.log(initScaleSet);\n    if (!initScaleSet) {\n      robotMarker.scaleX = 1.0 / stage.scaleX;\n      robotMarker.scaleY = 1.0 / stage.scaleY;\n      initScaleSet = true;\n    }\n    // change the angle\n    robotMarker.rotation = stage.rosQuaternionToGlobalTheta(orientation);\n    // Set visible\n    robotMarker.visible = true;\n  };\n  if (tfClient !== null) {\n    tfClient.subscribe(robot_pose, function (tf) {\n      updateRobotPosition(tf.translation, tf.rotation);\n    });\n  } else {\n    // setup a listener for the robot pose\n    var poseListener = new ROSLIB.Topic({\n      ros: ros,\n      name: robot_pose,\n      messageType: \"geometry_msgs/Pose\",\n      throttle_rate: 100\n    });\n    poseListener.subscribe(function (pose) {\n      //console.log(pose.position);\n      //console.log(pose.orientation);\n      console.log(that.rootObject);\n      console.log(robotMarker);\n      console.log(\"add robot marker\");\n      updateRobotPosition(pose.position, pose.orientation);\n    });\n  }\n  if (withOrientation === false) {\n    // setup a double click listener (no orientation)\n    this.rootObject.addEventListener(\"dblclick\", function (event) {\n      // convert to ROS coordinates\n      var coords = stage.globalToRos(event.stageX, event.stageY);\n      var pose = new ROSLIB.Pose({\n        position: new ROSLIB.Vector3(coords)\n      });\n      // send the goal\n      sendGoal(pose);\n    });\n  } else {\n    // withOrientation === true\n    // setup a click-and-point listener (with orientation)\n    var position = null;\n    var positionVec3 = null;\n    var thetaRadians = 0;\n    var thetaDegrees = 0;\n    var orientationMarker = null;\n    var mouseDown = false;\n    var xDelta = 0;\n    var yDelta = 0;\n    var mouseEventHandler = function (event, mouseState) {\n      if (mouseState === \"down\") {\n        // get position when mouse button is pressed down\n        position = stage.globalToRos(event.stageX, event.stageY);\n        positionVec3 = new ROSLIB.Vector3(position);\n        mouseDown = true;\n      } else if (mouseState === \"move\") {\n        // remove obsolete orientation marker\n        that.rootObject.removeChild(orientationMarker);\n        if (mouseDown === true) {\n          // if mouse button is held down:\n          // - get current mouse position\n          // - calulate direction between stored <position> and current position\n          // - place orientation marker\n          var currentPos = stage.globalToRos(event.stageX, event.stageY);\n          var currentPosVec3 = new ROSLIB.Vector3(currentPos);\n          if (use_image && ROS2D.hasOwnProperty(\"ImageNavigator\")) {\n            orientationMarker = new ROS2D.ImageNavigator({\n              size: 2.5,\n              image: use_image,\n              alpha: 0.7,\n              pulse: false\n            });\n          } else {\n            orientationMarker = new ROS2D.NavigationArrow({\n              size: 25,\n              strokeSize: 1,\n              fillColor: createjs.Graphics.getRGB(0, 255, 0, 0.66),\n              pulse: false\n            });\n          }\n          xDelta = currentPosVec3.x - positionVec3.x;\n          yDelta = currentPosVec3.y - positionVec3.y;\n          thetaRadians = Math.atan2(xDelta, yDelta);\n          thetaDegrees = thetaRadians * (180.0 / Math.PI);\n          if (thetaDegrees >= 0 && thetaDegrees <= 180) {\n            thetaDegrees += 270;\n          } else {\n            thetaDegrees -= 90;\n          }\n          orientationMarker.x = positionVec3.x;\n          orientationMarker.y = -positionVec3.y;\n          orientationMarker.rotation = thetaDegrees;\n          orientationMarker.scaleX = 1.0 / stage.scaleX;\n          orientationMarker.scaleY = 1.0 / stage.scaleY;\n          that.rootObject.addChild(orientationMarker);\n        }\n      } else if (mouseDown) {\n        // mouseState === 'up'\n        // if mouse button is released\n        // - get current mouse position (goalPos)\n        // - calulate direction between stored <position> and goal position\n        // - set pose with orientation\n        // - send goal\n        mouseDown = false;\n        var goalPos = stage.globalToRos(event.stageX, event.stageY);\n        var goalPosVec3 = new ROSLIB.Vector3(goalPos);\n        xDelta = goalPosVec3.x - positionVec3.x;\n        yDelta = goalPosVec3.y - positionVec3.y;\n        thetaRadians = Math.atan2(xDelta, yDelta);\n        if (thetaRadians >= 0 && thetaRadians <= Math.PI) {\n          thetaRadians += 3 * Math.PI / 2;\n        } else {\n          thetaRadians -= Math.PI / 2;\n        }\n        var qz = Math.sin(-thetaRadians / 2.0);\n        var qw = Math.cos(-thetaRadians / 2.0);\n        var orientation = new ROSLIB.Quaternion({\n          x: 0,\n          y: 0,\n          z: qz,\n          w: qw\n        });\n        var pose = new ROSLIB.Pose({\n          position: positionVec3,\n          orientation: orientation\n        });\n        // send the goal\n        sendGoal(pose);\n      }\n    };\n    this.rootObject.addEventListener(\"stagemousedown\", function (event) {\n      mouseEventHandler(event, \"down\");\n    });\n    this.rootObject.addEventListener(\"stagemousemove\", function (event) {\n      mouseEventHandler(event, \"move\");\n    });\n    this.rootObject.addEventListener(\"stagemouseup\", function (event) {\n      mouseEventHandler(event, \"up\");\n    });\n  }\n};","map":{"version":3,"names":["NAV2D","Navigator","options","that","ros","tfClient","robot_pose","serverName","actionName","withOrientation","use_image","image","rootObject","createjs","Container","goalMarker","currentGoal","actionClient","ROSLIB","ActionClient","sendGoal","pose","goal","Goal","goalMessage","target_pose","header","frame_id","send","ROS2D","hasOwnProperty","ImageNavigator","size","alpha","pulse","NavigationArrow","strokeSize","fillColor","Graphics","getRGB","addChild","x","position","y","rotation","stage","rosQuaternionToGlobalTheta","orientation","scaleX","scaleY","on","removeChild","cancelGoal","console","log","cancel","Stage","getStage","robotMarker","visible","initScaleSet","updateRobotPosition","subscribe","tf","translation","poseListener","Topic","name","messageType","throttle_rate","addEventListener","event","coords","globalToRos","stageX","stageY","Pose","Vector3","positionVec3","thetaRadians","thetaDegrees","orientationMarker","mouseDown","xDelta","yDelta","mouseEventHandler","mouseState","currentPos","currentPosVec3","Math","atan2","PI","goalPos","goalPosVec3","qz","sin","qw","cos","Quaternion","z","w"],"sources":["/home/mohit/Downloads/AMRbot_dashboard/src/components/js/ros-nav2d-js/navigator/Navigator.js"],"sourcesContent":["/**\n * @author Russell Toris - rctoris@wpi.edu\n * @author Lars Kunze - l.kunze@cs.bham.ac.uk\n * @author Raffaello Bonghi - raffaello.bonghi@officinerobotiche.it\n */\n\n/**\n * A navigator can be used to add click-to-navigate options to an object. If\n * withOrientation is set to true, the user can also specify the orientation of\n * the robot by clicking at the goal position and pointing into the desired\n * direction (while holding the button pressed).\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * tfClient (optional) - the TF client\n *   * robot_pose (optional) - the robot topic or TF to listen position\n *   * serverName (optional) - the action server name to use for navigation, like '/move_base'\n *   * actionName (optional) - the navigation action name, like 'move_base_msgs/MoveBaseAction'\n *   * rootObject (optional) - the root object to add the click listeners to and render robot markers to\n *   * withOrientation (optional) - if the Navigator should consider the robot orientation (default: false)\n */\nNAV2D.Navigator = function (options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  var tfClient = options.tfClient || null;\n  var robot_pose = options.robot_pose || \"/robot_pose\";\n  var serverName = options.serverName || \"/move_base\";\n  var actionName = options.actionName || \"move_base_msgs/MoveBaseAction\";\n  var withOrientation = options.withOrientation || false;\n  var use_image = options.image;\n  this.rootObject = options.rootObject || new createjs.Container();\n\n  this.goalMarker = null;\n\n  var currentGoal;\n\n  // setup the actionlib client\n  var actionClient = new ROSLIB.ActionClient({\n    ros: ros,\n    actionName: actionName,\n    serverName: serverName,\n  });\n\n  /**\n   * Send a goal to the navigation stack with the given pose.\n   *\n   * @param pose - the goal pose\n   */\n  function sendGoal(pose) {\n    // create a goal\n    var goal = new ROSLIB.Goal({\n      actionClient: actionClient,\n      goalMessage: {\n        target_pose: {\n          header: {\n            frame_id: \"map\",\n          },\n          pose: pose,\n        },\n      },\n    });\n    goal.send();\n\n    that.currentGoal = goal;\n\n    // create a marker for the goal\n    if (that.goalMarker === null) {\n      if (use_image && ROS2D.hasOwnProperty(\"ImageNavigator\")) {\n        that.goalMarker = new ROS2D.ImageNavigator({\n          size: 2.5,\n          image: use_image,\n          alpha: 0.7,\n          pulse: true,\n        });\n      } else {\n        that.goalMarker = new ROS2D.NavigationArrow({\n          size: 15,\n          strokeSize: 1,\n          fillColor: createjs.Graphics.getRGB(255, 64, 128, 0.66),\n          pulse: true,\n        });\n      }\n      that.rootObject.addChild(that.goalMarker);\n    }\n    that.goalMarker.x = pose.position.x;\n    that.goalMarker.y = -pose.position.y;\n    that.goalMarker.rotation = stage.rosQuaternionToGlobalTheta(\n      pose.orientation\n    );\n    that.goalMarker.scaleX = 1.0 / stage.scaleX;\n    that.goalMarker.scaleY = 1.0 / stage.scaleY;\n\n    goal.on(\"result\", function () {\n      that.rootObject.removeChild(that.goalMarker);\n    });\n  }\n\n  /**\n   * Cancel the currently active goal.\n   */\n  this.cancelGoal = function () {\n    console.log(\"Cancel Goals\");\n    if (typeof that.currentGoal !== \"undefined\") {\n      console.log(that.currentGoal);\n      that.currentGoal.cancel();\n    }\n  };\n\n  // get a handle to the stage\n  var stage;\n  if (that.rootObject instanceof createjs.Stage) {\n    stage = that.rootObject;\n  } else {\n    stage = that.rootObject.getStage();\n  }\n\n  // marker for the robot\n  var robotMarker = null;\n  if (use_image && ROS2D.hasOwnProperty(\"ImageNavigator\")) {\n    robotMarker = new ROS2D.ImageNavigator({\n      size: 2.5,\n      image: use_image,\n      pulse: true,\n    });\n  } else {\n    robotMarker = new ROS2D.NavigationArrow({\n      size: 25,\n      strokeSize: 1,\n      fillColor: createjs.Graphics.getRGB(255, 128, 0, 0.66),\n      pulse: true,\n    });\n  }\n\n  // wait for a pose to come in first\n  robotMarker.visible = false;\n  this.rootObject.addChild(robotMarker);\n  var initScaleSet = false;\n\n  var updateRobotPosition = function (pose, orientation) {\n    // update the robots position on the map\n    robotMarker.x = pose.x;\n    robotMarker.y = -pose.y;\n    console.log(initScaleSet);\n    if (!initScaleSet) {\n      robotMarker.scaleX = 1.0 / stage.scaleX;\n      robotMarker.scaleY = 1.0 / stage.scaleY;\n      initScaleSet = true;\n    }\n    // change the angle\n    robotMarker.rotation = stage.rosQuaternionToGlobalTheta(orientation);\n    // Set visible\n    robotMarker.visible = true;\n  };\n\n  if (tfClient !== null) {\n    tfClient.subscribe(robot_pose, function (tf) {\n      updateRobotPosition(tf.translation, tf.rotation);\n    });\n  } else {\n    // setup a listener for the robot pose\n    var poseListener = new ROSLIB.Topic({\n      ros: ros,\n      name: robot_pose,\n      messageType: \"geometry_msgs/Pose\",\n      throttle_rate: 100,\n    });\n    poseListener.subscribe(function (pose) {\n      //console.log(pose.position);\n      //console.log(pose.orientation);\n      console.log(that.rootObject);\n      console.log(robotMarker);\n      console.log(\"add robot marker\");\n      updateRobotPosition(pose.position, pose.orientation);\n    });\n  }\n\n  if (withOrientation === false) {\n    // setup a double click listener (no orientation)\n    this.rootObject.addEventListener(\"dblclick\", function (event) {\n      // convert to ROS coordinates\n      var coords = stage.globalToRos(event.stageX, event.stageY);\n      var pose = new ROSLIB.Pose({\n        position: new ROSLIB.Vector3(coords),\n      });\n      // send the goal\n      sendGoal(pose);\n    });\n  } else {\n    // withOrientation === true\n    // setup a click-and-point listener (with orientation)\n    var position = null;\n    var positionVec3 = null;\n    var thetaRadians = 0;\n    var thetaDegrees = 0;\n    var orientationMarker = null;\n    var mouseDown = false;\n    var xDelta = 0;\n    var yDelta = 0;\n\n    var mouseEventHandler = function (event, mouseState) {\n      if (mouseState === \"down\") {\n        // get position when mouse button is pressed down\n        position = stage.globalToRos(event.stageX, event.stageY);\n        positionVec3 = new ROSLIB.Vector3(position);\n        mouseDown = true;\n      } else if (mouseState === \"move\") {\n        // remove obsolete orientation marker\n        that.rootObject.removeChild(orientationMarker);\n\n        if (mouseDown === true) {\n          // if mouse button is held down:\n          // - get current mouse position\n          // - calulate direction between stored <position> and current position\n          // - place orientation marker\n          var currentPos = stage.globalToRos(event.stageX, event.stageY);\n          var currentPosVec3 = new ROSLIB.Vector3(currentPos);\n\n          if (use_image && ROS2D.hasOwnProperty(\"ImageNavigator\")) {\n            orientationMarker = new ROS2D.ImageNavigator({\n              size: 2.5,\n              image: use_image,\n              alpha: 0.7,\n              pulse: false,\n            });\n          } else {\n            orientationMarker = new ROS2D.NavigationArrow({\n              size: 25,\n              strokeSize: 1,\n              fillColor: createjs.Graphics.getRGB(0, 255, 0, 0.66),\n              pulse: false,\n            });\n          }\n\n          xDelta = currentPosVec3.x - positionVec3.x;\n          yDelta = currentPosVec3.y - positionVec3.y;\n\n          thetaRadians = Math.atan2(xDelta, yDelta);\n\n          thetaDegrees = thetaRadians * (180.0 / Math.PI);\n\n          if (thetaDegrees >= 0 && thetaDegrees <= 180) {\n            thetaDegrees += 270;\n          } else {\n            thetaDegrees -= 90;\n          }\n\n          orientationMarker.x = positionVec3.x;\n          orientationMarker.y = -positionVec3.y;\n          orientationMarker.rotation = thetaDegrees;\n          orientationMarker.scaleX = 1.0 / stage.scaleX;\n          orientationMarker.scaleY = 1.0 / stage.scaleY;\n\n          that.rootObject.addChild(orientationMarker);\n        }\n      } else if (mouseDown) {\n        // mouseState === 'up'\n        // if mouse button is released\n        // - get current mouse position (goalPos)\n        // - calulate direction between stored <position> and goal position\n        // - set pose with orientation\n        // - send goal\n        mouseDown = false;\n\n        var goalPos = stage.globalToRos(event.stageX, event.stageY);\n\n        var goalPosVec3 = new ROSLIB.Vector3(goalPos);\n\n        xDelta = goalPosVec3.x - positionVec3.x;\n        yDelta = goalPosVec3.y - positionVec3.y;\n\n        thetaRadians = Math.atan2(xDelta, yDelta);\n\n        if (thetaRadians >= 0 && thetaRadians <= Math.PI) {\n          thetaRadians += (3 * Math.PI) / 2;\n        } else {\n          thetaRadians -= Math.PI / 2;\n        }\n\n        var qz = Math.sin(-thetaRadians / 2.0);\n        var qw = Math.cos(-thetaRadians / 2.0);\n\n        var orientation = new ROSLIB.Quaternion({ x: 0, y: 0, z: qz, w: qw });\n\n        var pose = new ROSLIB.Pose({\n          position: positionVec3,\n          orientation: orientation,\n        });\n        // send the goal\n        sendGoal(pose);\n      }\n    };\n\n    this.rootObject.addEventListener(\"stagemousedown\", function (event) {\n      mouseEventHandler(event, \"down\");\n    });\n\n    this.rootObject.addEventListener(\"stagemousemove\", function (event) {\n      mouseEventHandler(event, \"move\");\n    });\n\n    this.rootObject.addEventListener(\"stagemouseup\", function (event) {\n      mouseEventHandler(event, \"up\");\n    });\n  }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,KAAK,CAACC,SAAS,GAAG,UAAUC,OAAO,EAAE;EACnC,IAAIC,IAAI,GAAG,IAAI;EACfD,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;EACvB,IAAIE,GAAG,GAAGF,OAAO,CAACE,GAAG;EACrB,IAAIC,QAAQ,GAAGH,OAAO,CAACG,QAAQ,IAAI,IAAI;EACvC,IAAIC,UAAU,GAAGJ,OAAO,CAACI,UAAU,IAAI,aAAa;EACpD,IAAIC,UAAU,GAAGL,OAAO,CAACK,UAAU,IAAI,YAAY;EACnD,IAAIC,UAAU,GAAGN,OAAO,CAACM,UAAU,IAAI,+BAA+B;EACtE,IAAIC,eAAe,GAAGP,OAAO,CAACO,eAAe,IAAI,KAAK;EACtD,IAAIC,SAAS,GAAGR,OAAO,CAACS,KAAK;EAC7B,IAAI,CAACC,UAAU,GAAGV,OAAO,CAACU,UAAU,IAAI,IAAIC,QAAQ,CAACC,SAAS,CAAC,CAAC;EAEhE,IAAI,CAACC,UAAU,GAAG,IAAI;EAEtB,IAAIC,WAAW;;EAEf;EACA,IAAIC,YAAY,GAAG,IAAIC,MAAM,CAACC,YAAY,CAAC;IACzCf,GAAG,EAAEA,GAAG;IACRI,UAAU,EAAEA,UAAU;IACtBD,UAAU,EAAEA;EACd,CAAC,CAAC;;EAEF;AACF;AACA;AACA;AACA;EACE,SAASa,QAAQA,CAACC,IAAI,EAAE;IACtB;IACA,IAAIC,IAAI,GAAG,IAAIJ,MAAM,CAACK,IAAI,CAAC;MACzBN,YAAY,EAAEA,YAAY;MAC1BO,WAAW,EAAE;QACXC,WAAW,EAAE;UACXC,MAAM,EAAE;YACNC,QAAQ,EAAE;UACZ,CAAC;UACDN,IAAI,EAAEA;QACR;MACF;IACF,CAAC,CAAC;IACFC,IAAI,CAACM,IAAI,CAAC,CAAC;IAEXzB,IAAI,CAACa,WAAW,GAAGM,IAAI;;IAEvB;IACA,IAAInB,IAAI,CAACY,UAAU,KAAK,IAAI,EAAE;MAC5B,IAAIL,SAAS,IAAImB,KAAK,CAACC,cAAc,CAAC,gBAAgB,CAAC,EAAE;QACvD3B,IAAI,CAACY,UAAU,GAAG,IAAIc,KAAK,CAACE,cAAc,CAAC;UACzCC,IAAI,EAAE,GAAG;UACTrB,KAAK,EAAED,SAAS;UAChBuB,KAAK,EAAE,GAAG;UACVC,KAAK,EAAE;QACT,CAAC,CAAC;MACJ,CAAC,MAAM;QACL/B,IAAI,CAACY,UAAU,GAAG,IAAIc,KAAK,CAACM,eAAe,CAAC;UAC1CH,IAAI,EAAE,EAAE;UACRI,UAAU,EAAE,CAAC;UACbC,SAAS,EAAExB,QAAQ,CAACyB,QAAQ,CAACC,MAAM,CAAC,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,CAAC;UACvDL,KAAK,EAAE;QACT,CAAC,CAAC;MACJ;MACA/B,IAAI,CAACS,UAAU,CAAC4B,QAAQ,CAACrC,IAAI,CAACY,UAAU,CAAC;IAC3C;IACAZ,IAAI,CAACY,UAAU,CAAC0B,CAAC,GAAGpB,IAAI,CAACqB,QAAQ,CAACD,CAAC;IACnCtC,IAAI,CAACY,UAAU,CAAC4B,CAAC,GAAG,CAACtB,IAAI,CAACqB,QAAQ,CAACC,CAAC;IACpCxC,IAAI,CAACY,UAAU,CAAC6B,QAAQ,GAAGC,KAAK,CAACC,0BAA0B,CACzDzB,IAAI,CAAC0B,WACP,CAAC;IACD5C,IAAI,CAACY,UAAU,CAACiC,MAAM,GAAG,GAAG,GAAGH,KAAK,CAACG,MAAM;IAC3C7C,IAAI,CAACY,UAAU,CAACkC,MAAM,GAAG,GAAG,GAAGJ,KAAK,CAACI,MAAM;IAE3C3B,IAAI,CAAC4B,EAAE,CAAC,QAAQ,EAAE,YAAY;MAC5B/C,IAAI,CAACS,UAAU,CAACuC,WAAW,CAAChD,IAAI,CAACY,UAAU,CAAC;IAC9C,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;EACE,IAAI,CAACqC,UAAU,GAAG,YAAY;IAC5BC,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;IAC3B,IAAI,OAAOnD,IAAI,CAACa,WAAW,KAAK,WAAW,EAAE;MAC3CqC,OAAO,CAACC,GAAG,CAACnD,IAAI,CAACa,WAAW,CAAC;MAC7Bb,IAAI,CAACa,WAAW,CAACuC,MAAM,CAAC,CAAC;IAC3B;EACF,CAAC;;EAED;EACA,IAAIV,KAAK;EACT,IAAI1C,IAAI,CAACS,UAAU,YAAYC,QAAQ,CAAC2C,KAAK,EAAE;IAC7CX,KAAK,GAAG1C,IAAI,CAACS,UAAU;EACzB,CAAC,MAAM;IACLiC,KAAK,GAAG1C,IAAI,CAACS,UAAU,CAAC6C,QAAQ,CAAC,CAAC;EACpC;;EAEA;EACA,IAAIC,WAAW,GAAG,IAAI;EACtB,IAAIhD,SAAS,IAAImB,KAAK,CAACC,cAAc,CAAC,gBAAgB,CAAC,EAAE;IACvD4B,WAAW,GAAG,IAAI7B,KAAK,CAACE,cAAc,CAAC;MACrCC,IAAI,EAAE,GAAG;MACTrB,KAAK,EAAED,SAAS;MAChBwB,KAAK,EAAE;IACT,CAAC,CAAC;EACJ,CAAC,MAAM;IACLwB,WAAW,GAAG,IAAI7B,KAAK,CAACM,eAAe,CAAC;MACtCH,IAAI,EAAE,EAAE;MACRI,UAAU,EAAE,CAAC;MACbC,SAAS,EAAExB,QAAQ,CAACyB,QAAQ,CAACC,MAAM,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,IAAI,CAAC;MACtDL,KAAK,EAAE;IACT,CAAC,CAAC;EACJ;;EAEA;EACAwB,WAAW,CAACC,OAAO,GAAG,KAAK;EAC3B,IAAI,CAAC/C,UAAU,CAAC4B,QAAQ,CAACkB,WAAW,CAAC;EACrC,IAAIE,YAAY,GAAG,KAAK;EAExB,IAAIC,mBAAmB,GAAG,SAAAA,CAAUxC,IAAI,EAAE0B,WAAW,EAAE;IACrD;IACAW,WAAW,CAACjB,CAAC,GAAGpB,IAAI,CAACoB,CAAC;IACtBiB,WAAW,CAACf,CAAC,GAAG,CAACtB,IAAI,CAACsB,CAAC;IACvBU,OAAO,CAACC,GAAG,CAACM,YAAY,CAAC;IACzB,IAAI,CAACA,YAAY,EAAE;MACjBF,WAAW,CAACV,MAAM,GAAG,GAAG,GAAGH,KAAK,CAACG,MAAM;MACvCU,WAAW,CAACT,MAAM,GAAG,GAAG,GAAGJ,KAAK,CAACI,MAAM;MACvCW,YAAY,GAAG,IAAI;IACrB;IACA;IACAF,WAAW,CAACd,QAAQ,GAAGC,KAAK,CAACC,0BAA0B,CAACC,WAAW,CAAC;IACpE;IACAW,WAAW,CAACC,OAAO,GAAG,IAAI;EAC5B,CAAC;EAED,IAAItD,QAAQ,KAAK,IAAI,EAAE;IACrBA,QAAQ,CAACyD,SAAS,CAACxD,UAAU,EAAE,UAAUyD,EAAE,EAAE;MAC3CF,mBAAmB,CAACE,EAAE,CAACC,WAAW,EAAED,EAAE,CAACnB,QAAQ,CAAC;IAClD,CAAC,CAAC;EACJ,CAAC,MAAM;IACL;IACA,IAAIqB,YAAY,GAAG,IAAI/C,MAAM,CAACgD,KAAK,CAAC;MAClC9D,GAAG,EAAEA,GAAG;MACR+D,IAAI,EAAE7D,UAAU;MAChB8D,WAAW,EAAE,oBAAoB;MACjCC,aAAa,EAAE;IACjB,CAAC,CAAC;IACFJ,YAAY,CAACH,SAAS,CAAC,UAAUzC,IAAI,EAAE;MACrC;MACA;MACAgC,OAAO,CAACC,GAAG,CAACnD,IAAI,CAACS,UAAU,CAAC;MAC5ByC,OAAO,CAACC,GAAG,CAACI,WAAW,CAAC;MACxBL,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;MAC/BO,mBAAmB,CAACxC,IAAI,CAACqB,QAAQ,EAAErB,IAAI,CAAC0B,WAAW,CAAC;IACtD,CAAC,CAAC;EACJ;EAEA,IAAItC,eAAe,KAAK,KAAK,EAAE;IAC7B;IACA,IAAI,CAACG,UAAU,CAAC0D,gBAAgB,CAAC,UAAU,EAAE,UAAUC,KAAK,EAAE;MAC5D;MACA,IAAIC,MAAM,GAAG3B,KAAK,CAAC4B,WAAW,CAACF,KAAK,CAACG,MAAM,EAAEH,KAAK,CAACI,MAAM,CAAC;MAC1D,IAAItD,IAAI,GAAG,IAAIH,MAAM,CAAC0D,IAAI,CAAC;QACzBlC,QAAQ,EAAE,IAAIxB,MAAM,CAAC2D,OAAO,CAACL,MAAM;MACrC,CAAC,CAAC;MACF;MACApD,QAAQ,CAACC,IAAI,CAAC;IAChB,CAAC,CAAC;EACJ,CAAC,MAAM;IACL;IACA;IACA,IAAIqB,QAAQ,GAAG,IAAI;IACnB,IAAIoC,YAAY,GAAG,IAAI;IACvB,IAAIC,YAAY,GAAG,CAAC;IACpB,IAAIC,YAAY,GAAG,CAAC;IACpB,IAAIC,iBAAiB,GAAG,IAAI;IAC5B,IAAIC,SAAS,GAAG,KAAK;IACrB,IAAIC,MAAM,GAAG,CAAC;IACd,IAAIC,MAAM,GAAG,CAAC;IAEd,IAAIC,iBAAiB,GAAG,SAAAA,CAAUd,KAAK,EAAEe,UAAU,EAAE;MACnD,IAAIA,UAAU,KAAK,MAAM,EAAE;QACzB;QACA5C,QAAQ,GAAGG,KAAK,CAAC4B,WAAW,CAACF,KAAK,CAACG,MAAM,EAAEH,KAAK,CAACI,MAAM,CAAC;QACxDG,YAAY,GAAG,IAAI5D,MAAM,CAAC2D,OAAO,CAACnC,QAAQ,CAAC;QAC3CwC,SAAS,GAAG,IAAI;MAClB,CAAC,MAAM,IAAII,UAAU,KAAK,MAAM,EAAE;QAChC;QACAnF,IAAI,CAACS,UAAU,CAACuC,WAAW,CAAC8B,iBAAiB,CAAC;QAE9C,IAAIC,SAAS,KAAK,IAAI,EAAE;UACtB;UACA;UACA;UACA;UACA,IAAIK,UAAU,GAAG1C,KAAK,CAAC4B,WAAW,CAACF,KAAK,CAACG,MAAM,EAAEH,KAAK,CAACI,MAAM,CAAC;UAC9D,IAAIa,cAAc,GAAG,IAAItE,MAAM,CAAC2D,OAAO,CAACU,UAAU,CAAC;UAEnD,IAAI7E,SAAS,IAAImB,KAAK,CAACC,cAAc,CAAC,gBAAgB,CAAC,EAAE;YACvDmD,iBAAiB,GAAG,IAAIpD,KAAK,CAACE,cAAc,CAAC;cAC3CC,IAAI,EAAE,GAAG;cACTrB,KAAK,EAAED,SAAS;cAChBuB,KAAK,EAAE,GAAG;cACVC,KAAK,EAAE;YACT,CAAC,CAAC;UACJ,CAAC,MAAM;YACL+C,iBAAiB,GAAG,IAAIpD,KAAK,CAACM,eAAe,CAAC;cAC5CH,IAAI,EAAE,EAAE;cACRI,UAAU,EAAE,CAAC;cACbC,SAAS,EAAExB,QAAQ,CAACyB,QAAQ,CAACC,MAAM,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,IAAI,CAAC;cACpDL,KAAK,EAAE;YACT,CAAC,CAAC;UACJ;UAEAiD,MAAM,GAAGK,cAAc,CAAC/C,CAAC,GAAGqC,YAAY,CAACrC,CAAC;UAC1C2C,MAAM,GAAGI,cAAc,CAAC7C,CAAC,GAAGmC,YAAY,CAACnC,CAAC;UAE1CoC,YAAY,GAAGU,IAAI,CAACC,KAAK,CAACP,MAAM,EAAEC,MAAM,CAAC;UAEzCJ,YAAY,GAAGD,YAAY,IAAI,KAAK,GAAGU,IAAI,CAACE,EAAE,CAAC;UAE/C,IAAIX,YAAY,IAAI,CAAC,IAAIA,YAAY,IAAI,GAAG,EAAE;YAC5CA,YAAY,IAAI,GAAG;UACrB,CAAC,MAAM;YACLA,YAAY,IAAI,EAAE;UACpB;UAEAC,iBAAiB,CAACxC,CAAC,GAAGqC,YAAY,CAACrC,CAAC;UACpCwC,iBAAiB,CAACtC,CAAC,GAAG,CAACmC,YAAY,CAACnC,CAAC;UACrCsC,iBAAiB,CAACrC,QAAQ,GAAGoC,YAAY;UACzCC,iBAAiB,CAACjC,MAAM,GAAG,GAAG,GAAGH,KAAK,CAACG,MAAM;UAC7CiC,iBAAiB,CAAChC,MAAM,GAAG,GAAG,GAAGJ,KAAK,CAACI,MAAM;UAE7C9C,IAAI,CAACS,UAAU,CAAC4B,QAAQ,CAACyC,iBAAiB,CAAC;QAC7C;MACF,CAAC,MAAM,IAAIC,SAAS,EAAE;QACpB;QACA;QACA;QACA;QACA;QACA;QACAA,SAAS,GAAG,KAAK;QAEjB,IAAIU,OAAO,GAAG/C,KAAK,CAAC4B,WAAW,CAACF,KAAK,CAACG,MAAM,EAAEH,KAAK,CAACI,MAAM,CAAC;QAE3D,IAAIkB,WAAW,GAAG,IAAI3E,MAAM,CAAC2D,OAAO,CAACe,OAAO,CAAC;QAE7CT,MAAM,GAAGU,WAAW,CAACpD,CAAC,GAAGqC,YAAY,CAACrC,CAAC;QACvC2C,MAAM,GAAGS,WAAW,CAAClD,CAAC,GAAGmC,YAAY,CAACnC,CAAC;QAEvCoC,YAAY,GAAGU,IAAI,CAACC,KAAK,CAACP,MAAM,EAAEC,MAAM,CAAC;QAEzC,IAAIL,YAAY,IAAI,CAAC,IAAIA,YAAY,IAAIU,IAAI,CAACE,EAAE,EAAE;UAChDZ,YAAY,IAAK,CAAC,GAAGU,IAAI,CAACE,EAAE,GAAI,CAAC;QACnC,CAAC,MAAM;UACLZ,YAAY,IAAIU,IAAI,CAACE,EAAE,GAAG,CAAC;QAC7B;QAEA,IAAIG,EAAE,GAAGL,IAAI,CAACM,GAAG,CAAC,CAAChB,YAAY,GAAG,GAAG,CAAC;QACtC,IAAIiB,EAAE,GAAGP,IAAI,CAACQ,GAAG,CAAC,CAAClB,YAAY,GAAG,GAAG,CAAC;QAEtC,IAAIhC,WAAW,GAAG,IAAI7B,MAAM,CAACgF,UAAU,CAAC;UAAEzD,CAAC,EAAE,CAAC;UAAEE,CAAC,EAAE,CAAC;UAAEwD,CAAC,EAAEL,EAAE;UAAEM,CAAC,EAAEJ;QAAG,CAAC,CAAC;QAErE,IAAI3E,IAAI,GAAG,IAAIH,MAAM,CAAC0D,IAAI,CAAC;UACzBlC,QAAQ,EAAEoC,YAAY;UACtB/B,WAAW,EAAEA;QACf,CAAC,CAAC;QACF;QACA3B,QAAQ,CAACC,IAAI,CAAC;MAChB;IACF,CAAC;IAED,IAAI,CAACT,UAAU,CAAC0D,gBAAgB,CAAC,gBAAgB,EAAE,UAAUC,KAAK,EAAE;MAClEc,iBAAiB,CAACd,KAAK,EAAE,MAAM,CAAC;IAClC,CAAC,CAAC;IAEF,IAAI,CAAC3D,UAAU,CAAC0D,gBAAgB,CAAC,gBAAgB,EAAE,UAAUC,KAAK,EAAE;MAClEc,iBAAiB,CAACd,KAAK,EAAE,MAAM,CAAC;IAClC,CAAC,CAAC;IAEF,IAAI,CAAC3D,UAAU,CAAC0D,gBAAgB,CAAC,cAAc,EAAE,UAAUC,KAAK,EAAE;MAChEc,iBAAiB,CAACd,KAAK,EAAE,IAAI,CAAC;IAChC,CAAC,CAAC;EACJ;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}