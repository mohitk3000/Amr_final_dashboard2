{"ast":null,"code":"var _jsxFileName = \"/home/mohit/Downloads/AMRbot_dashboard/src/components/Map2.jsx\";\nimport React, { Component } from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport Config from \"../scripts/config\";\nimport * as ROSLIB from 'roslib';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass RobotState extends Component {\n  constructor() {\n    super();\n    this.state = {\n      ros: null\n    };\n    this.state = {\n      ros: new window.ROSLIB.Ros(),\n      connection: false\n    };\n    this.view_map = this.view_map.bind(this);\n  }\n  componentDidMount() {\n    // Don't need to call getRobotState() here since it's already called in the 'connection' event\n    this.initConnection();\n    this.view_map();\n    // Subscribe to the /map topic\n    const mapTopic = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: \"/map\",\n      messageType: \"nav_msgs/OccupancyGrid\"\n    });\n    mapTopic.subscribe(message => {\n      // Log received map data to the console\n      console.log(\"Received Map Data: \", message);\n      console.log(\"haare krishna\");\n    });\n  }\n  initConnection() {\n    this.setState({\n      ros: new window.ROSLIB.Ros()\n    });\n    console.log(\"Map: \" + this.state.ros);\n    this.state.ros.on(\"error\", error => {\n      console.error(\"ROS Error:\", error);\n    });\n    try {\n      this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT);\n    } catch (error) {\n      console.error(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT);\n      console.error(\"Cannot connect to the WS robot. Try again after 1 second\");\n    }\n  }\n  view_map() {\n    var viewer = new window.ROS2D.Viewer({\n      divID: \"nav_div3\",\n      width: 200,\n      height: 160\n    });\n    var navClient = new window.NAV2D.OccupancyGridClientNav({\n      ros: this.state.ros,\n      rootObject: viewer.scene,\n      viewer: viewer,\n      serverName: \"/move_base\",\n      // Correct the property name here\n      withOrientation: true\n    });\n  }\n\n  // ... your existing methods\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"nav_div3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default RobotState;","map":{"version":3,"names":["React","Component","Row","Col","Config","ROSLIB","jsxDEV","_jsxDEV","RobotState","constructor","state","ros","window","Ros","connection","view_map","bind","componentDidMount","initConnection","mapTopic","Topic","name","messageType","subscribe","message","console","log","setState","on","error","connect","ROSBRIDGE_SERVER_IP","ROSBRIDGE_SERVER_PORT","viewer","ROS2D","Viewer","divID","width","height","navClient","NAV2D","OccupancyGridClientNav","rootObject","scene","serverName","withOrientation","render","children","id","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/home/mohit/Downloads/AMRbot_dashboard/src/components/Map2.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport Config from \"../scripts/config\";\nimport * as ROSLIB from 'roslib';\n\n\n\nclass RobotState extends Component {\n  state={\n    ros:null,\n  };\n\n  constructor(){\n    super();\n    this.state = {\n      ros: new window.ROSLIB.Ros(),\n      connection: false,\n    };\n    this.view_map=this.view_map.bind(this)\n\n   \n  }\n  componentDidMount() {\n    // Don't need to call getRobotState() here since it's already called in the 'connection' event\n    this.initConnection();\n    this.view_map();\n     // Subscribe to the /map topic\n     const mapTopic = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: \"/map\",\n      messageType: \"nav_msgs/OccupancyGrid\",\n    });\n\n    mapTopic.subscribe((message) => {\n      // Log received map data to the console\n      console.log(\"Received Map Data: \", message);\n      console.log(\"haare krishna\");\n    });\n  }\n\n\n  initConnection() {\n    this.setState({ ros: new window.ROSLIB.Ros() });\n    console.log(\"Map: \" + this.state.ros);\n  \n    this.state.ros.on(\"error\", (error) => {\n      console.error(\"ROS Error:\", error);\n    });\n  \n    try {\n      this.state.ros.connect(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT\n      );\n    } catch (error) {\n      console.error(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT\n      );\n      console.error(\"Cannot connect to the WS robot. Try again after 1 second\");\n    }\n  }\n\n\n  \n  view_map(){\n    var viewer=new window.ROS2D.Viewer({\n      divID:\"nav_div3\",\n      width:200,\n      height:160,\n    });\n    var navClient = new window.NAV2D.OccupancyGridClientNav({\n      ros: this.state.ros,\n      rootObject: viewer.scene,\n      viewer: viewer,\n      serverName: \"/move_base\",// Correct the property name here\n      withOrientation: true,\n    });\n    \n    \n    \n  }\n\n\n  // ... your existing methods\n\n  render() {\n    return (\n      <div>\n        <div id=\"nav_div3\"></div>\n      </div>\n    );\n  }\n}\n\n\nexport default RobotState;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}