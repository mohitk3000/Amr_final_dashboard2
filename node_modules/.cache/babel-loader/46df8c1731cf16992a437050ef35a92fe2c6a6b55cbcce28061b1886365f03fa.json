{"ast":null,"code":"var _jsxFileName = \"/home/mohit/Downloads/AMRbot_dashboard/src/components/Hconn.jsx\",\n  _s = $RefreshSig$();\n// connection.jsx\n\nimport React, { useState, useEffect } from 'react';\nimport config from \"../scripts/config\";\nimport Alert from \"react-bootstrap/Alert\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Connection = () => {\n  _s();\n  const [connection, setconnection] = useState(false);\n  const [ros, setRos] = useState(null);\n  useEffect(() => {\n    // This will run once when the component mounts\n    initConnection();\n  }, []); // The empty dependency array ensures it runs only once\n\n  function initConnection() {\n    const newRos = new window.ROSLIB.Ros();\n    setRos(newRos);\n    console.log(newRos);\n    console.log(\"hello world\");\n\n    // Attempt to connect\n\n    try {\n      newRos.connect('ws://' + config.ROSBRIDGE_SERVER_IP + ':9090');\n      console.log(\"printing ip from config file\");\n      console.log(config.ROSBRIDGE_SERVER_IP);\n    } catch (error) {\n      console.error('Error connecting to ROS server:', error);\n      // Handle the connection error\n    }\n\n    newRos.onopen = () => {\n      console.log('Connection opened.');\n      console.log('isConnected:', newRos.isConnected);\n      if (newRos.isConnected) {\n        // Code to execute when the ROS connection is established\n        console.log('ROS connection is established.');\n      } else {\n        // Code to execute when the ROS connection is not established\n        console.log('ROS connection is not established.');\n      }\n    };\n\n    // Event handler for when the connection is closed\n    newRos.onclose = () => {\n      setconnection(false);\n      setTimeout(() => {\n        try {\n          // newRos.connect('ws://localhost:9090');\n          newRos.connect('ws://' + config.ROSBRIDGE_SERVER_IP + ':9090');\n        } catch (error) {\n          console.error('Error connecting to ROS server:', error);\n          // Handle the connection error\n        }\n      }, 3000);\n    };\n    setTimeout(() => {\n      if (newRos.isConnected) {\n        // Code to execute when the ROS connection is established\n        console.log('ROS connection is established.');\n        setconnection(true);\n      } else {\n        // Code to execute when the ROS connection is not established\n        console.log('ROS connection is not established.');\n        setconnection(false);\n      }\n    }, 1000);\n    newRos.onerror = error => {\n      console.error('Connection error:', error);\n      // You can handle the error or update the state accordingly\n    };\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Alert, {\n      className: \"text-center m-3\",\n      variant: connection ? 'success' : 'danger',\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Connection Status: \", connection ? 'Robot Connected' : 'Robot Disconnected']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 3\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 3\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n_s(Connection, \"NokCw2BaG/m2Kvn977uX5E0c+74=\");\n_c = Connection;\nexport default Connection;\nvar _c;\n$RefreshReg$(_c, \"Connection\");","map":{"version":3,"names":["React","useState","useEffect","config","Alert","jsxDEV","_jsxDEV","Connection","_s","connection","setconnection","ros","setRos","initConnection","newRos","window","ROSLIB","Ros","console","log","connect","ROSBRIDGE_SERVER_IP","error","onopen","isConnected","onclose","setTimeout","onerror","children","className","variant","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/mohit/Downloads/AMRbot_dashboard/src/components/Hconn.jsx"],"sourcesContent":["// connection.jsx\n\nimport React, { useState, useEffect } from 'react';\nimport config from \"../scripts/config\";\nimport Alert from \"react-bootstrap/Alert\";\nconst Connection = () => {\n  const [connection, setconnection] = useState(false);\n  const [ros, setRos] = useState(null);\n\n  useEffect(() => {\n    // This will run once when the component mounts\n    initConnection();\n  }, []); // The empty dependency array ensures it runs only once\n\n  function initConnection() {\n    const newRos = new window.ROSLIB.Ros();\n    setRos(newRos);\n    console.log(newRos);\n    \n    console.log(\"hello world\");\n   \n    \n  \n     \n\n     // Attempt to connect\n    \n     try {\n      newRos.connect('ws://'+config.ROSBRIDGE_SERVER_IP+':9090');\n      console.log(\"printing ip from config file\");\n      console.log(config.ROSBRIDGE_SERVER_IP);\n           \n      } catch (error) {\n        console.error('Error connecting to ROS server:', error);\n        // Handle the connection error\n      }\n\n      newRos.onopen = () => {\n        console.log('Connection opened.');\n        console.log('isConnected:', newRos.isConnected);\n\n        if (newRos.isConnected) {\n            // Code to execute when the ROS connection is established\n            console.log('ROS connection is established.');\n          } else {\n            // Code to execute when the ROS connection is not established\n            console.log('ROS connection is not established.');\n          }\n    \n      };\n\n\n\n      \n       // Event handler for when the connection is closed\n       newRos.onclose = () => {\n        setconnection(false);\n        setTimeout(()=>{\n            try {\n              // newRos.connect('ws://localhost:9090');\n              newRos.connect('ws://'+config.ROSBRIDGE_SERVER_IP+':9090');\n           \n                \n              }catch (error) {\n                console.error('Error connecting to ROS server:', error);\n                // Handle the connection error\n              }\n\n        },3000);\n        \n        \n        \n      };\n      setTimeout(()=>{\n        \n        if (newRos.isConnected) {\n            // Code to execute when the ROS connection is established\n            console.log('ROS connection is established.');\n            setconnection(true);\n\n\n            \n            \n          } else {\n            // Code to execute when the ROS connection is not established\n            console.log('ROS connection is not established.');\n            setconnection(false);\n          }\n      },1000);\n  \n      newRos.onerror = (error) => {\n        console.error('Connection error:', error);\n        // You can handle the error or update the state accordingly\n      };\n\n    \n      \n  }\n    \n  return (\n    <div>\n    \n  <Alert className='text-center m-3' variant={connection ? 'success' : 'danger'}>\n  <p >Connection Status: {connection ? 'Robot Connected' : 'Robot Disconnected'}</p>\n\n  </Alert>\n   \n     \n   \n    \n      \n    </div>\n  );\n};\n\nexport default Connection;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}