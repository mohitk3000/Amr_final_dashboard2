{"ast":null,"code":"var _jsxFileName = \"/home/mohit/Downloads/AMRbot_dashboard/src/components/Map2.jsx\";\nimport React, { Component } from \"react\";\nimport Config from \"../scripts/config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Map extends Component {\n  constructor() {\n    super();\n    this.state = {\n      ros: null\n    };\n    this.init_connection = this.init_connection.bind(this);\n    this.view_map = this.view_map.bind(this);\n  }\n  init_connection() {\n    this.setState({\n      ros: new window.ROSLIB.Ros()\n    });\n    console.log(\"Map: \" + this.state.ros);\n    try {\n      this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT);\n    } catch (error) {\n      console.log(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT);\n      console.log(\"Cannot connect to the WS robot. Try again after 1 second\");\n    }\n  }\n  componentDidMount() {\n    this.init_connection();\n    console.log(\"Map: componentDidMount \" + this.state.ros);\n    this.view_map();\n\n    // Subscribe to the /map topic\n    const mapTopic = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: \"/map\",\n      messageType: \"nav_msgs/OccupancyGrid\"\n    });\n    mapTopic.subscribe(message => {\n      // Log received map data to the console\n      console.log(\"Received Map Data: \", message);\n    });\n  }\n  view_map() {\n    var viewer = new window.ROS2D.Viewer({\n      divID: \"nav_div\",\n      width: 640,\n      height: 480\n    });\n    var navClient = new window.NAV2D.OccupancyGridClientNav({\n      ros: this.state.ros,\n      rootObject: viewer.scene,\n      viewer: viewer,\n      serverName: \"/move_base\",\n      withOrientation: true\n    });\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"nav_div\",\n        children: \"Viewer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default Map;","map":{"version":3,"names":["React","Component","Config","jsxDEV","_jsxDEV","Map","constructor","state","ros","init_connection","bind","view_map","setState","window","ROSLIB","Ros","console","log","connect","ROSBRIDGE_SERVER_IP","ROSBRIDGE_SERVER_PORT","error","componentDidMount","mapTopic","Topic","name","messageType","subscribe","message","viewer","ROS2D","Viewer","divID","width","height","navClient","NAV2D","OccupancyGridClientNav","rootObject","scene","serverName","withOrientation","render","children","id","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/home/mohit/Downloads/AMRbot_dashboard/src/components/Map2.jsx"],"sourcesContent":["import React, { Component } from \"react\";\nimport Config from \"../scripts/config\";\n\nclass Map extends Component {\n  state = {\n    ros: null,\n  };\n\n  constructor() {\n    super();\n    this.init_connection = this.init_connection.bind(this);\n    this.view_map = this.view_map.bind(this);\n  }\n\n  init_connection() {\n    this.setState({ ros: new window.ROSLIB.Ros() });\n    console.log(\"Map: \" + this.state.ros);\n\n    try {\n      this.state.ros.connect(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT\n      );\n    } catch (error) {\n      console.log(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT\n      );\n      console.log(\n        \"Cannot connect to the WS robot. Try again after 1 second\"\n      );\n    }\n  }\n\n  componentDidMount() {\n    this.init_connection();\n    console.log(\"Map: componentDidMount \" + this.state.ros);\n    this.view_map();\n\n    // Subscribe to the /map topic\n    const mapTopic = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: \"/map\",\n      messageType: \"nav_msgs/OccupancyGrid\",\n    });\n\n    mapTopic.subscribe((message) => {\n      // Log received map data to the console\n      console.log(\"Received Map Data: \", message);\n    });\n  }\n\n  view_map() {\n    var viewer = new window.ROS2D.Viewer({\n      divID: \"nav_div\",\n      width: 640,\n      height: 480,\n    });\n\n    var navClient = new window.NAV2D.OccupancyGridClientNav({\n      ros: this.state.ros,\n      rootObject: viewer.scene,\n      viewer: viewer,\n      serverName: \"/move_base\",\n      withOrientation: true,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div id=\"nav_div\">Viewer</div>\n      </div>\n    );\n  }\n}\n\nexport default Map;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,MAAM,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,GAAG,SAASJ,SAAS,CAAC;EAK1BK,WAAWA,CAAA,EAAG;IACZ,KAAK,CAAC,CAAC;IAAC,KALVC,KAAK,GAAG;MACNC,GAAG,EAAE;IACP,CAAC;IAIC,IAAI,CAACC,eAAe,GAAG,IAAI,CAACA,eAAe,CAACC,IAAI,CAAC,IAAI,CAAC;IACtD,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACD,IAAI,CAAC,IAAI,CAAC;EAC1C;EAEAD,eAAeA,CAAA,EAAG;IAChB,IAAI,CAACG,QAAQ,CAAC;MAAEJ,GAAG,EAAE,IAAIK,MAAM,CAACC,MAAM,CAACC,GAAG,CAAC;IAAE,CAAC,CAAC;IAC/CC,OAAO,CAACC,GAAG,CAAC,OAAO,GAAG,IAAI,CAACV,KAAK,CAACC,GAAG,CAAC;IAErC,IAAI;MACF,IAAI,CAACD,KAAK,CAACC,GAAG,CAACU,OAAO,CACpB,OAAO,GACLhB,MAAM,CAACiB,mBAAmB,GAC1B,GAAG,GACHjB,MAAM,CAACkB,qBACX,CAAC;IACH,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdL,OAAO,CAACC,GAAG,CACT,OAAO,GACLf,MAAM,CAACiB,mBAAmB,GAC1B,GAAG,GACHjB,MAAM,CAACkB,qBACX,CAAC;MACDJ,OAAO,CAACC,GAAG,CACT,0DACF,CAAC;IACH;EACF;EAEAK,iBAAiBA,CAAA,EAAG;IAClB,IAAI,CAACb,eAAe,CAAC,CAAC;IACtBO,OAAO,CAACC,GAAG,CAAC,yBAAyB,GAAG,IAAI,CAACV,KAAK,CAACC,GAAG,CAAC;IACvD,IAAI,CAACG,QAAQ,CAAC,CAAC;;IAEf;IACA,MAAMY,QAAQ,GAAG,IAAIV,MAAM,CAACC,MAAM,CAACU,KAAK,CAAC;MACvChB,GAAG,EAAE,IAAI,CAACD,KAAK,CAACC,GAAG;MACnBiB,IAAI,EAAE,MAAM;MACZC,WAAW,EAAE;IACf,CAAC,CAAC;IAEFH,QAAQ,CAACI,SAAS,CAAEC,OAAO,IAAK;MAC9B;MACAZ,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEW,OAAO,CAAC;IAC7C,CAAC,CAAC;EACJ;EAEAjB,QAAQA,CAAA,EAAG;IACT,IAAIkB,MAAM,GAAG,IAAIhB,MAAM,CAACiB,KAAK,CAACC,MAAM,CAAC;MACnCC,KAAK,EAAE,SAAS;MAChBC,KAAK,EAAE,GAAG;MACVC,MAAM,EAAE;IACV,CAAC,CAAC;IAEF,IAAIC,SAAS,GAAG,IAAItB,MAAM,CAACuB,KAAK,CAACC,sBAAsB,CAAC;MACtD7B,GAAG,EAAE,IAAI,CAACD,KAAK,CAACC,GAAG;MACnB8B,UAAU,EAAET,MAAM,CAACU,KAAK;MACxBV,MAAM,EAAEA,MAAM;MACdW,UAAU,EAAE,YAAY;MACxBC,eAAe,EAAE;IACnB,CAAC,CAAC;EACJ;EAEAC,MAAMA,CAAA,EAAG;IACP,oBACEtC,OAAA;MAAAuC,QAAA,eACEvC,OAAA;QAAKwC,EAAE,EAAC,SAAS;QAAAD,QAAA,EAAC;MAAM;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3B,CAAC;EAEV;AACF;AAEA,eAAe3C,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}