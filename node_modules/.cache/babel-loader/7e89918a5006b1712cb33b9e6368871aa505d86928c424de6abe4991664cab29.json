{"ast":null,"code":"var _jsxFileName = \"/home/mohit/Downloads/AMRbot_dashboard/src/components/Teleoperation.jsx\";\nimport React, { Component } from 'react';\nimport { Joystick } from 'react-joystick-component';\nimport config from \"../scripts/config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Connection extends Component {\n  constructor() {\n    super();\n    this.state = {\n      ros: new window.ROSLIB.Ros(),\n      connection: false\n    };\n    this.handleMove = this.handleMove.bind(this);\n    this.handleStop = this.handleStop.bind(this);\n  }\n  componentDidMount() {\n    this.initConnection();\n  }\n  initConnection() {\n    const {\n      ros\n    } = this.state;\n    try {\n      ros.connect('ws://' + config.ROSBRIDGE_SERVER_IP + ':9090');\n      ros.on('connection', () => {\n        console.log('Connected to ROS Bridge.');\n        // this.setState({ connection: true });\n      });\n\n      ros.on('close', () => {\n        console.log('Connection to ROS Bridge closed.');\n        // this.setState({ connection: false });\n      });\n\n      ros.on('error', error => {\n        console.error('Error connecting to ROS Bridge:', error);\n      });\n    } catch (error) {\n      console.error('Error connecting to ROS Bridge:', error);\n    }\n  }\n  handleMove(event) {\n    const {\n      ros\n    } = this.state;\n    try {\n      const cmdVel = new window.ROSLIB.Topic({\n        ros: ros,\n        name: '/cmd_vel',\n        messageType: 'geometry_msgs/Twist'\n      });\n\n      // Adjust the linear and angular velocities based on joystick movement\n      const twist = new window.ROSLIB.Message({\n        linear: {\n          x: event.y,\n          y: 0.0,\n          z: 0.0\n        },\n        angular: {\n          x: 0.0,\n          y: 0.0,\n          z: -event.x\n        }\n      });\n      cmdVel.publish(twist);\n      console.log('Twist message published successfully.');\n    } catch (error) {\n      console.error('Error publishing Twist message:', error);\n    }\n  }\n  handleStop(event) {\n    // Your stop handling logic here...\n    const {\n      ros\n    } = this.state;\n    try {\n      const cmdVel = new window.ROSLIB.Topic({\n        ros: ros,\n        name: '/cmd_vel',\n        messageType: 'geometry_msgs/Twist'\n      });\n      const twist = new window.ROSLIB.Message({\n        linear: {\n          x: 0.0,\n          // Scale the joystick value for linear velocity\n          y: 0.0,\n          z: 0.0\n        },\n        angular: {\n          x: 0.0,\n          y: 0.0,\n          z: 0.0 // Scale the joystick value for angular velocity\n        }\n      });\n\n      cmdVel.publish(twist);\n      console.log('Twist message published successfully.');\n    } catch (error) {\n      console.error('Error publishing Twist message:', error);\n    }\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Joystick, {\n        size: 100,\n        sticky: true,\n        baseColor: \"#EEEEEE\",\n        stickColor: \"#BBBBBB\",\n        move: this.handleMove,\n        stop: this.handleStop\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default Connection;","map":{"version":3,"names":["React","Component","Joystick","config","jsxDEV","_jsxDEV","Connection","constructor","state","ros","window","ROSLIB","Ros","connection","handleMove","bind","handleStop","componentDidMount","initConnection","connect","ROSBRIDGE_SERVER_IP","on","console","log","error","event","cmdVel","Topic","name","messageType","twist","Message","linear","x","y","z","angular","publish","render","children","size","sticky","baseColor","stickColor","move","stop","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/home/mohit/Downloads/AMRbot_dashboard/src/components/Teleoperation.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport { Joystick } from 'react-joystick-component';\nimport config from \"../scripts/config\";\n\nclass Connection extends Component {\n  constructor() {\n    super();\n    this.state = {\n      ros: new window.ROSLIB.Ros(),\n      connection: false,\n    };\n\n    this.handleMove = this.handleMove.bind(this);\n    this.handleStop = this.handleStop.bind(this);\n  }\n\n  componentDidMount() {\n    this.initConnection();\n  }\n\n  initConnection() {\n    const { ros } = this.state;\n\n    try {\n      ros.connect('ws://'+config.ROSBRIDGE_SERVER_IP+':9090');\n\n      ros.on('connection', () => {\n        console.log('Connected to ROS Bridge.');\n        // this.setState({ connection: true });\n      });\n\n      ros.on('close', () => {\n        console.log('Connection to ROS Bridge closed.');\n        // this.setState({ connection: false });\n      });\n\n      ros.on('error', (error) => {\n        console.error('Error connecting to ROS Bridge:', error);\n      });\n    } catch (error) {\n      console.error('Error connecting to ROS Bridge:', error);\n    }\n  }\n\n  handleMove(event) {\n    const { ros } = this.state;\n  \n    try {\n      const cmdVel = new window.ROSLIB.Topic({\n        ros: ros,\n        name: '/cmd_vel',\n        messageType: 'geometry_msgs/Twist',\n      });\n  \n     \n  \n      // Adjust the linear and angular velocities based on joystick movement\n      const twist = new window.ROSLIB.Message({\n        linear: {\n          x: event.y,\n          y: 0.0,\n          z: 0.0,\n        },\n        angular: {\n          x: 0.0,\n          y: 0.0,\n          z: -event.x,\n        },\n      });\n  \n      cmdVel.publish(twist);\n      console.log('Twist message published successfully.');\n    } catch (error) {\n      console.error('Error publishing Twist message:', error);\n    }\n  }\n  \n\n  handleStop(event) {\n    // Your stop handling logic here...\n    const { ros } = this.state;\n\n    try {\n      const cmdVel = new window.ROSLIB.Topic({\n        ros: ros,\n        name: '/cmd_vel',\n        messageType: 'geometry_msgs/Twist',\n      });\n\n      const twist = new window.ROSLIB.Message({\n        linear: {\n          x: 0.0, // Scale the joystick value for linear velocity\n          y: 0.0,\n          z: 0.0,\n        },\n        angular: {\n          x: 0.0,\n          y: 0.0,\n          z: 0.0, // Scale the joystick value for angular velocity\n        },\n      });\n\n      cmdVel.publish(twist);\n      console.log('Twist message published successfully.');\n    } catch (error) {\n      console.error('Error publishing Twist message:', error);\n    }\n  }\n  \n\n  render() {\n    return (\n      <div>\n        <Joystick\n          size={100}\n          sticky={true}\n          baseColor=\"#EEEEEE\"\n          stickColor=\"#BBBBBB\"\n          move={this.handleMove}\n          stop={this.handleStop}\n        ></Joystick>\n\n        \n      </div>\n    );\n  }\n}\n\nexport default Connection;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}