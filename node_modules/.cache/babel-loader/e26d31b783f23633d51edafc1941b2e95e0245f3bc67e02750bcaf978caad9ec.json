{"ast":null,"code":"var _jsxFileName = \"/home/mohit/Downloads/AMRbot_dashboard/src/components/Map2.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport * as ROSLIB from 'roslib';\nimport * as ROS2D from 'ros2d';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapViewer = () => {\n  _s();\n  useEffect(() => {\n    const init = () => {\n      // Connect to ROS\n      const ros = new ROSLIB.Ros({\n        url: 'ws://localhost:9090' // Replace with your ROS WebSocket URL\n      });\n\n      // Create the main viewer\n      const viewer = new ROS2D.Viewer({\n        divID: 'map',\n        width: 600,\n        height: 500\n      });\n\n      // Setup the map client\n      const gridClient = new ROS2D.OccupancyGridClient({\n        ros: ros,\n        rootObject: viewer.scene\n      });\n\n      // Scale the canvas to fit the map\n      gridClient.on('change', () => {\n        viewer.scaleToDimensions(gridClient.currentGrid.width, gridClient.currentGrid.height);\n      });\n    };\n\n    // Call the init function when the page is loaded\n    init();\n  }, []); // Empty dependency array ensures the effect runs only once on mount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"map\",\n    style: {\n      width: '600px',\n      height: '500px'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 10\n  }, this);\n};\n_s(MapViewer, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = MapViewer;\nexport default MapViewer;\nvar _c;\n$RefreshReg$(_c, \"MapViewer\");","map":{"version":3,"names":["React","useEffect","ROSLIB","ROS2D","jsxDEV","_jsxDEV","MapViewer","_s","init","ros","Ros","url","viewer","Viewer","divID","width","height","gridClient","OccupancyGridClient","rootObject","scene","on","scaleToDimensions","currentGrid","id","style","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/mohit/Downloads/AMRbot_dashboard/src/components/Map2.jsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport * as ROSLIB from 'roslib';\nimport * as ROS2D from 'ros2d';\n\n\n\n\nconst MapViewer = () => {\n  useEffect(() => {\n    const init = () => {\n      // Connect to ROS\n      const ros = new ROSLIB.Ros({\n        url: 'ws://localhost:9090', // Replace with your ROS WebSocket URL\n      });\n\n      // Create the main viewer\n      const viewer = new ROS2D.Viewer({\n        divID: 'map',\n        width: 600,\n        height: 500,\n      });\n\n      // Setup the map client\n      const gridClient = new ROS2D.OccupancyGridClient({\n        ros: ros,\n        rootObject: viewer.scene,\n      });\n\n      // Scale the canvas to fit the map\n      gridClient.on('change', () => {\n        viewer.scaleToDimensions(gridClient.currentGrid.width, gridClient.currentGrid.height);\n      });\n    };\n\n    // Call the init function when the page is loaded\n    init();\n  }, []); // Empty dependency array ensures the effect runs only once on mount\n\n  return <div id=\"map\" style={{ width: '600px', height: '500px' }} />;\n};\n\nexport default MapViewer;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAO,KAAKC,MAAM,MAAM,QAAQ;AAChC,OAAO,KAAKC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAK/B,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtBN,SAAS,CAAC,MAAM;IACd,MAAMO,IAAI,GAAGA,CAAA,KAAM;MACjB;MACA,MAAMC,GAAG,GAAG,IAAIP,MAAM,CAACQ,GAAG,CAAC;QACzBC,GAAG,EAAE,qBAAqB,CAAE;MAC9B,CAAC,CAAC;;MAEF;MACA,MAAMC,MAAM,GAAG,IAAIT,KAAK,CAACU,MAAM,CAAC;QAC9BC,KAAK,EAAE,KAAK;QACZC,KAAK,EAAE,GAAG;QACVC,MAAM,EAAE;MACV,CAAC,CAAC;;MAEF;MACA,MAAMC,UAAU,GAAG,IAAId,KAAK,CAACe,mBAAmB,CAAC;QAC/CT,GAAG,EAAEA,GAAG;QACRU,UAAU,EAAEP,MAAM,CAACQ;MACrB,CAAC,CAAC;;MAEF;MACAH,UAAU,CAACI,EAAE,CAAC,QAAQ,EAAE,MAAM;QAC5BT,MAAM,CAACU,iBAAiB,CAACL,UAAU,CAACM,WAAW,CAACR,KAAK,EAAEE,UAAU,CAACM,WAAW,CAACP,MAAM,CAAC;MACvF,CAAC,CAAC;IACJ,CAAC;;IAED;IACAR,IAAI,CAAC,CAAC;EACR,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBAAOH,OAAA;IAAKmB,EAAE,EAAC,KAAK;IAACC,KAAK,EAAE;MAAEV,KAAK,EAAE,OAAO;MAAEC,MAAM,EAAE;IAAQ;EAAE;IAAAU,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACrE,CAAC;AAACtB,EAAA,CAhCID,SAAS;AAAAwB,EAAA,GAATxB,SAAS;AAkCf,eAAeA,SAAS;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}