{"ast":null,"code":"/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A OccupancyGridClientNav uses an OccupancyGridClient to create a map for use with a Navigator.\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * tfClient (optional) - Read information from TF\n *   * topic (optional) - the map meta data topic to listen to\n *   * robot_pose (optional) - the robot topic or TF to listen position\n *   * image_map - the URL of the image to render\n *   * image (optional) - the route of the image if we want to use the NavigationImage instead the NavigationArrow\n *   * serverName (optional) - the action server name to use for navigation, like '/move_base'\n *   * actionName (optional) - the navigation action name, like 'move_base_msgs/MoveBaseAction'\n *   * rootObject (optional) - the root object to add the click listeners to and render robot markers to\n *   * withOrientation (optional) - if the Navigator should consider the robot orientation (default: false)\n *   * viewer - the main viewer to render to\n */\nNAV2D.ImageMapClientNav = function (options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  var tfClient = options.tfClient || null;\n  var topic = options.topic || '/map_metadata';\n  var robot_pose = options.robot_pose || '/robot_pose';\n  var image_map = options.image_map;\n  var image = options.image || false;\n  var serverName = options.serverName || '/move_base';\n  var actionName = options.actionName || 'move_base_msgs/MoveBaseAction';\n  var rootObject = options.rootObject || new createjs.Container();\n  var viewer = options.viewer;\n  var withOrientation = options.withOrientation || false;\n  var old_state = null;\n\n  // setup a client to get the map\n  var client = new ROS2D.ImageMapClient({\n    ros: ros,\n    rootObject: rootObject,\n    topic: topic,\n    image: image_map\n  });\n  var navigator = new NAV2D.Navigator({\n    ros: ros,\n    tfClient: tfClient,\n    serverName: serverName,\n    actionName: actionName,\n    robot_pose: robot_pose,\n    rootObject: rootObject,\n    withOrientation: withOrientation,\n    image: image\n  });\n  client.on('change', function () {\n    // scale the viewer to fit the map\n    old_state = NAV2D.resizeMap(old_state, viewer, client.currentGrid);\n  });\n};","map":{"version":3,"names":["NAV2D","ImageMapClientNav","options","that","ros","tfClient","topic","robot_pose","image_map","image","serverName","actionName","rootObject","createjs","Container","viewer","withOrientation","old_state","client","ROS2D","ImageMapClient","navigator","Navigator","on","resizeMap","currentGrid"],"sources":["/home/mohit/Downloads/AMRbot_dashboard/src/components/js/ros-nav2d-js/navigator/ImageMapClientNav.js"],"sourcesContent":["/**\n * @author Russell Toris - rctoris@wpi.edu\n */\n\n/**\n * A OccupancyGridClientNav uses an OccupancyGridClient to create a map for use with a Navigator.\n *\n * @constructor\n * @param options - object with following keys:\n *   * ros - the ROSLIB.Ros connection handle\n *   * tfClient (optional) - Read information from TF\n *   * topic (optional) - the map meta data topic to listen to\n *   * robot_pose (optional) - the robot topic or TF to listen position\n *   * image_map - the URL of the image to render\n *   * image (optional) - the route of the image if we want to use the NavigationImage instead the NavigationArrow\n *   * serverName (optional) - the action server name to use for navigation, like '/move_base'\n *   * actionName (optional) - the navigation action name, like 'move_base_msgs/MoveBaseAction'\n *   * rootObject (optional) - the root object to add the click listeners to and render robot markers to\n *   * withOrientation (optional) - if the Navigator should consider the robot orientation (default: false)\n *   * viewer - the main viewer to render to\n */\nNAV2D.ImageMapClientNav = function(options) {\n  var that = this;\n  options = options || {};\n  var ros = options.ros;\n  var tfClient = options.tfClient || null;\n  var topic = options.topic || '/map_metadata';\n  var robot_pose = options.robot_pose || '/robot_pose';\n  var image_map = options.image_map;\n  var image = options.image || false;\n  var serverName = options.serverName || '/move_base';\n  var actionName = options.actionName || 'move_base_msgs/MoveBaseAction';\n  var rootObject = options.rootObject || new createjs.Container();\n  var viewer = options.viewer;\n  var withOrientation = options.withOrientation || false;\n  var old_state = null;\n\n  // setup a client to get the map\n  var client = new ROS2D.ImageMapClient({\n    ros : ros,\n    rootObject : rootObject,\n    topic : topic,\n    image : image_map\n  });\n\n  var navigator = new NAV2D.Navigator({\n    ros: ros,\n    tfClient: tfClient,\n    serverName: serverName,\n    actionName: actionName,\n    robot_pose : robot_pose,\n    rootObject: rootObject,\n    withOrientation: withOrientation,\n    image: image\n  });\n\n  client.on('change', function() {\n    // scale the viewer to fit the map\n    old_state = NAV2D.resizeMap(old_state, viewer, client.currentGrid);\n  });\n};\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,KAAK,CAACC,iBAAiB,GAAG,UAASC,OAAO,EAAE;EAC1C,IAAIC,IAAI,GAAG,IAAI;EACfD,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;EACvB,IAAIE,GAAG,GAAGF,OAAO,CAACE,GAAG;EACrB,IAAIC,QAAQ,GAAGH,OAAO,CAACG,QAAQ,IAAI,IAAI;EACvC,IAAIC,KAAK,GAAGJ,OAAO,CAACI,KAAK,IAAI,eAAe;EAC5C,IAAIC,UAAU,GAAGL,OAAO,CAACK,UAAU,IAAI,aAAa;EACpD,IAAIC,SAAS,GAAGN,OAAO,CAACM,SAAS;EACjC,IAAIC,KAAK,GAAGP,OAAO,CAACO,KAAK,IAAI,KAAK;EAClC,IAAIC,UAAU,GAAGR,OAAO,CAACQ,UAAU,IAAI,YAAY;EACnD,IAAIC,UAAU,GAAGT,OAAO,CAACS,UAAU,IAAI,+BAA+B;EACtE,IAAIC,UAAU,GAAGV,OAAO,CAACU,UAAU,IAAI,IAAIC,QAAQ,CAACC,SAAS,CAAC,CAAC;EAC/D,IAAIC,MAAM,GAAGb,OAAO,CAACa,MAAM;EAC3B,IAAIC,eAAe,GAAGd,OAAO,CAACc,eAAe,IAAI,KAAK;EACtD,IAAIC,SAAS,GAAG,IAAI;;EAEpB;EACA,IAAIC,MAAM,GAAG,IAAIC,KAAK,CAACC,cAAc,CAAC;IACpChB,GAAG,EAAGA,GAAG;IACTQ,UAAU,EAAGA,UAAU;IACvBN,KAAK,EAAGA,KAAK;IACbG,KAAK,EAAGD;EACV,CAAC,CAAC;EAEF,IAAIa,SAAS,GAAG,IAAIrB,KAAK,CAACsB,SAAS,CAAC;IAClClB,GAAG,EAAEA,GAAG;IACRC,QAAQ,EAAEA,QAAQ;IAClBK,UAAU,EAAEA,UAAU;IACtBC,UAAU,EAAEA,UAAU;IACtBJ,UAAU,EAAGA,UAAU;IACvBK,UAAU,EAAEA,UAAU;IACtBI,eAAe,EAAEA,eAAe;IAChCP,KAAK,EAAEA;EACT,CAAC,CAAC;EAEFS,MAAM,CAACK,EAAE,CAAC,QAAQ,EAAE,YAAW;IAC7B;IACAN,SAAS,GAAGjB,KAAK,CAACwB,SAAS,CAACP,SAAS,EAAEF,MAAM,EAAEG,MAAM,CAACO,WAAW,CAAC;EACpE,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}