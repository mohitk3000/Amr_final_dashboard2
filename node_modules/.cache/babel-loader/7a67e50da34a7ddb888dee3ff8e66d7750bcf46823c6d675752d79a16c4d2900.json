{"ast":null,"code":"var _jsxFileName = \"/home/mohit/Downloads/AMRbot_dashboard/src/components/Map2.jsx\";\nimport React, { Component } from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport Config from '../scripts/config';\nimport * as ROSLIB from 'roslib';\nimport ROS2D from 'ros2djs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass RobotState extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      ros: null,\n      robotPosition: null\n    };\n  }\n  componentDidMount() {\n    this.initConnection();\n    this.viewMap();\n    this.subscribeToRobotPose();\n  }\n  initConnection() {\n    try {\n      const ros = new ROSLIB.Ros();\n      ros.on('error', error => {\n        console.error('ROS Error:', error);\n      });\n      ros.connect(`ws://${Config.ROSBRIDGE_SERVER_IP}:${Config.ROSBRIDGE_SERVER_PORT}`);\n      this.setState({\n        ros\n      });\n    } catch (error) {\n      console.error(`Cannot connect to the WS robot: ${error}`);\n    }\n  }\n  subscribeToRobotPose() {\n    const {\n      ros\n    } = this.state;\n    if (ros) {\n      const robotPoseTopic = new ROSLIB.Topic({\n        ros,\n        name: '/robot_pose',\n        messageType: 'geometry_msgs/Pose'\n      });\n      robotPoseTopic.subscribe(message => {\n        // Update state with the received robot position\n        this.setState({\n          robotPosition: message\n        });\n      });\n    }\n  }\n  viewMap() {\n    const {\n      ros\n    } = this.state;\n    if (ros) {\n      const viewer = new ROS2D.Viewer({\n        divID: 'nav_div3',\n        width: 200,\n        height: 200\n      });\n      const arrow = new ROS2D.Arrow({\n        size: 10,\n        strokeSize: 1,\n        fillColor: createjs.Graphics.getRGB(255, 0, 0)\n      });\n\n      // Add the arrow to the viewer's scene\n      viewer.scene.addChild(arrow);\n      const navClient = new ROS2D.OccupancyGridClientNav({\n        ros,\n        rootObject: viewer.scene,\n        viewer,\n        serverName: '/move_base',\n        withOrientation: true\n      });\n\n      // Update the arrow's position on each animation frame\n      viewer.addObject(arrow);\n      viewer.animate();\n      viewer.on('frameRendered', () => {\n        const {\n          robotPosition\n        } = this.state;\n        if (robotPosition) {\n          // Update arrow's position based on the robot position\n          const pose = robotPosition.position;\n          arrow.x = pose.x;\n          arrow.y = pose.y;\n          arrow.rotation = Math.atan2(robotPosition.orientation.z, robotPosition.orientation.w) * (180 / Math.PI);\n        }\n      });\n    }\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"nav_div3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default RobotState;","map":{"version":3,"names":["React","Component","Row","Col","Config","ROSLIB","ROS2D","jsxDEV","_jsxDEV","RobotState","constructor","args","state","ros","robotPosition","componentDidMount","initConnection","viewMap","subscribeToRobotPose","Ros","on","error","console","connect","ROSBRIDGE_SERVER_IP","ROSBRIDGE_SERVER_PORT","setState","robotPoseTopic","Topic","name","messageType","subscribe","message","viewer","Viewer","divID","width","height","arrow","Arrow","size","strokeSize","fillColor","createjs","Graphics","getRGB","scene","addChild","navClient","OccupancyGridClientNav","rootObject","serverName","withOrientation","addObject","animate","pose","position","x","y","rotation","Math","atan2","orientation","z","w","PI","render","children","id","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/home/mohit/Downloads/AMRbot_dashboard/src/components/Map2.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport Config from '../scripts/config';\nimport * as ROSLIB from 'roslib';\nimport ROS2D from 'ros2djs';\n\nclass RobotState extends Component {\n  state = {\n    ros: null,\n    robotPosition: null,\n  };\n\n  componentDidMount() {\n    this.initConnection();\n    this.viewMap();\n    this.subscribeToRobotPose();\n  }\n\n  initConnection() {\n    try {\n      const ros = new ROSLIB.Ros();\n      ros.on('error', (error) => {\n        console.error('ROS Error:', error);\n      });\n\n      ros.connect(`ws://${Config.ROSBRIDGE_SERVER_IP}:${Config.ROSBRIDGE_SERVER_PORT}`);\n      this.setState({ ros });\n    } catch (error) {\n      console.error(`Cannot connect to the WS robot: ${error}`);\n    }\n  }\n\n  subscribeToRobotPose() {\n    const { ros } = this.state;\n\n    if (ros) {\n      const robotPoseTopic = new ROSLIB.Topic({\n        ros,\n        name: '/robot_pose',\n        messageType: 'geometry_msgs/Pose',\n      });\n\n      robotPoseTopic.subscribe((message) => {\n        // Update state with the received robot position\n        this.setState({ robotPosition: message });\n      });\n    }\n  }\n\n  viewMap() {\n    const { ros } = this.state;\n\n    if (ros) {\n      const viewer = new ROS2D.Viewer({\n        divID: 'nav_div3',\n        width: 200,\n        height: 200,\n      });\n\n      const arrow = new ROS2D.Arrow({\n        size: 10,\n        strokeSize: 1,\n        fillColor: createjs.Graphics.getRGB(255, 0, 0),\n      });\n\n      // Add the arrow to the viewer's scene\n      viewer.scene.addChild(arrow);\n\n      const navClient = new ROS2D.OccupancyGridClientNav({\n        ros,\n        rootObject: viewer.scene,\n        viewer,\n        serverName: '/move_base',\n        withOrientation: true,\n      });\n\n      // Update the arrow's position on each animation frame\n      viewer.addObject(arrow);\n      viewer.animate();\n\n      viewer.on('frameRendered', () => {\n        const { robotPosition } = this.state;\n\n        if (robotPosition) {\n          // Update arrow's position based on the robot position\n          const pose = robotPosition.position;\n          arrow.x = pose.x;\n          arrow.y = pose.y;\n          arrow.rotation = Math.atan2(robotPosition.orientation.z, robotPosition.orientation.w) * (180 / Math.PI);\n        }\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div id=\"nav_div3\"></div>\n      </div>\n    );\n  }\n}\n\nexport default RobotState;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}