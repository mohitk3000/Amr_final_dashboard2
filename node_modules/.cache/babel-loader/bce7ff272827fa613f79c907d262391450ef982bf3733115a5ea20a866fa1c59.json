{"ast":null,"code":"var _jsxFileName = \"/home/mohit/Downloads/AMRbot_dashboard/src/components/Map2.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport * as ROSLIB from 'roslib';\nimport * as ROS3D from 'ros3d';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapViewer = () => {\n  _s();\n  useEffect(() => {\n    const init = () => {\n      // Connect to ROS\n      const ros = new ROSLIB.Ros({\n        url: 'ws://localhost:9090'\n      });\n\n      // Create a 3D viewer\n      const viewer = new ROS3D.Viewer({\n        divID: 'map-viewer',\n        width: 600,\n        height: 500\n      });\n\n      // Create a grid for the map\n      const occupancyGridClient = new ROS3D.OccupancyGridClient({\n        ros: ros,\n        continuous: true,\n        rootObject: viewer.scene,\n        topic: '/map' // Update with your actual map topic\n      });\n\n      // Set up camera focus on the map\n      const fixedFrame = new ROS3D.FixedFrameTransformClient({\n        ros: ros,\n        fixedFrame: '/map' // Update with your actual map frame\n      });\n\n      // Add any other visualizations or markers as needed\n      // For example, you can add a grid to the viewer\n      const grid = new ROS3D.Grid({\n        color: '#0181c4',\n        cellSize: 1,\n        num_cells: 10\n      });\n      viewer.scene.add(grid);\n    };\n\n    // Call the init function when the page is loaded\n    init();\n  }, []); // Empty dependency array ensures the effect runs only once on mount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"map-viewer\",\n    style: {\n      width: '600px',\n      height: '500px'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 10\n  }, this);\n};\n_s(MapViewer, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = MapViewer;\nexport default MapViewer;\nvar _c;\n$RefreshReg$(_c, \"MapViewer\");","map":{"version":3,"names":["React","useEffect","ROSLIB","ROS3D","jsxDEV","_jsxDEV","MapViewer","_s","init","ros","Ros","url","viewer","Viewer","divID","width","height","occupancyGridClient","OccupancyGridClient","continuous","rootObject","scene","topic","fixedFrame","FixedFrameTransformClient","grid","Grid","color","cellSize","num_cells","add","id","style","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/mohit/Downloads/AMRbot_dashboard/src/components/Map2.jsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport * as ROSLIB from 'roslib';\nimport * as ROS3D from 'ros3d';\n\nconst MapViewer = () => {\n  useEffect(() => {\n    const init = () => {\n      // Connect to ROS\n      const ros = new ROSLIB.Ros({\n        url: 'ws://localhost:9090',\n      });\n\n      // Create a 3D viewer\n      const viewer = new ROS3D.Viewer({\n        divID: 'map-viewer',\n        width: 600,\n        height: 500,\n      });\n\n      // Create a grid for the map\n      const occupancyGridClient = new ROS3D.OccupancyGridClient({\n        ros: ros,\n        continuous: true,\n        rootObject: viewer.scene,\n        topic: '/map',  // Update with your actual map topic\n      });\n\n      // Set up camera focus on the map\n      const fixedFrame = new ROS3D.FixedFrameTransformClient({\n        ros: ros,\n        fixedFrame: '/map',  // Update with your actual map frame\n      });\n\n      // Add any other visualizations or markers as needed\n      // For example, you can add a grid to the viewer\n      const grid = new ROS3D.Grid({\n        color: '#0181c4',\n        cellSize: 1,\n        num_cells: 10,\n      });\n      viewer.scene.add(grid);\n    };\n\n    // Call the init function when the page is loaded\n    init();\n  }, []); // Empty dependency array ensures the effect runs only once on mount\n\n  return <div id=\"map-viewer\" style={{ width: '600px', height: '500px' }} />;\n};\n\nexport default MapViewer;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAO,KAAKC,MAAM,MAAM,QAAQ;AAChC,OAAO,KAAKC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtBN,SAAS,CAAC,MAAM;IACd,MAAMO,IAAI,GAAGA,CAAA,KAAM;MACjB;MACA,MAAMC,GAAG,GAAG,IAAIP,MAAM,CAACQ,GAAG,CAAC;QACzBC,GAAG,EAAE;MACP,CAAC,CAAC;;MAEF;MACA,MAAMC,MAAM,GAAG,IAAIT,KAAK,CAACU,MAAM,CAAC;QAC9BC,KAAK,EAAE,YAAY;QACnBC,KAAK,EAAE,GAAG;QACVC,MAAM,EAAE;MACV,CAAC,CAAC;;MAEF;MACA,MAAMC,mBAAmB,GAAG,IAAId,KAAK,CAACe,mBAAmB,CAAC;QACxDT,GAAG,EAAEA,GAAG;QACRU,UAAU,EAAE,IAAI;QAChBC,UAAU,EAAER,MAAM,CAACS,KAAK;QACxBC,KAAK,EAAE,MAAM,CAAG;MAClB,CAAC,CAAC;;MAEF;MACA,MAAMC,UAAU,GAAG,IAAIpB,KAAK,CAACqB,yBAAyB,CAAC;QACrDf,GAAG,EAAEA,GAAG;QACRc,UAAU,EAAE,MAAM,CAAG;MACvB,CAAC,CAAC;;MAEF;MACA;MACA,MAAME,IAAI,GAAG,IAAItB,KAAK,CAACuB,IAAI,CAAC;QAC1BC,KAAK,EAAE,SAAS;QAChBC,QAAQ,EAAE,CAAC;QACXC,SAAS,EAAE;MACb,CAAC,CAAC;MACFjB,MAAM,CAACS,KAAK,CAACS,GAAG,CAACL,IAAI,CAAC;IACxB,CAAC;;IAED;IACAjB,IAAI,CAAC,CAAC;EACR,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBAAOH,OAAA;IAAK0B,EAAE,EAAC,YAAY;IAACC,KAAK,EAAE;MAAEjB,KAAK,EAAE,OAAO;MAAEC,MAAM,EAAE;IAAQ;EAAE;IAAAiB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC5E,CAAC;AAAC7B,EAAA,CA5CID,SAAS;AAAA+B,EAAA,GAAT/B,SAAS;AA8Cf,eAAeA,SAAS;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}