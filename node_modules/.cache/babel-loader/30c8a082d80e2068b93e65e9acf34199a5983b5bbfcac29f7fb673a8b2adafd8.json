{"ast":null,"code":"var _jsxFileName = \"/home/mohit/Downloads/AMRbot_dashboard/src/components/Map2.jsx\";\nimport React, { Component } from 'react';\nimport * as ROSLIB from 'roslib';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass RawImageDisplay extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      ros: null,\n      imageData: null\n    };\n  }\n  componentDidMount() {\n    this.initConnection();\n    this.subscribeToRawImage();\n  }\n  initConnection() {\n    const ros = new ROSLIB.Ros();\n    ros.on('error', error => {\n      console.error('ROS Error:', error);\n    });\n    try {\n      ros.connect('ws://localhost:9090'); // Update with your ROS Bridge server URL\n    } catch (error) {\n      console.error('Cannot connect to the WS robot. Try again after 1 second');\n    }\n    this.setState({\n      ros\n    });\n  }\n  subscribeToRawImage() {\n    const {\n      ros\n    } = this.state;\n    if (ros) {\n      const imageTopic = new ROSLIB.Topic({\n        ros,\n        name: '/camera/image_raw',\n        messageType: 'sensor_msgs/Image'\n      });\n      imageTopic.subscribe(message => {\n        const buffer = message.data;\n        const imageData = `data:image/jpeg;base64,${this.arrayBufferToBase64(buffer)}`;\n\n        // Set the source of the image element\n        this.setState({\n          imageData\n        });\n      });\n    }\n  }\n  arrayBufferToBase64(buffer) {\n    let binary = '';\n    const bytes = new Uint8Array(buffer);\n    const len = bytes.byteLength;\n    for (let i = 0; i < len; i++) {\n      binary += String.fromCharCode(bytes[i]);\n    }\n    return btoa(binary);\n  }\n  render() {\n    const {\n      imageData\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [imageData && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: imageData,\n          alt: \"Raw Image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 25\n        }, this), !imageData && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No image data received\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default RawImageDisplay;","map":{"version":3,"names":["React","Component","ROSLIB","jsxDEV","_jsxDEV","RawImageDisplay","constructor","args","state","ros","imageData","componentDidMount","initConnection","subscribeToRawImage","Ros","on","error","console","connect","setState","imageTopic","Topic","name","messageType","subscribe","message","buffer","data","arrayBufferToBase64","binary","bytes","Uint8Array","len","byteLength","i","String","fromCharCode","btoa","render","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/home/mohit/Downloads/AMRbot_dashboard/src/components/Map2.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport * as ROSLIB from 'roslib';\n\nclass RawImageDisplay extends Component {\n  state = {\n    ros: null,\n    imageData: null,\n  };\n\n  componentDidMount() {\n    this.initConnection();\n    this.subscribeToRawImage();\n  }\n\n  initConnection() {\n    const ros = new ROSLIB.Ros();\n\n    ros.on('error', (error) => {\n      console.error('ROS Error:', error);\n    });\n\n    try {\n      ros.connect('ws://localhost:9090'); // Update with your ROS Bridge server URL\n    } catch (error) {\n      console.error('Cannot connect to the WS robot. Try again after 1 second');\n    }\n\n    this.setState({ ros });\n  }\n\n  subscribeToRawImage() {\n    const { ros } = this.state;\n\n    if (ros) {\n      const imageTopic = new ROSLIB.Topic({\n        ros,\n        name: '/camera/image_raw',\n        messageType: 'sensor_msgs/Image',\n      });\n\n      imageTopic.subscribe((message) => {\n        const buffer = message.data;\n        const imageData = `data:image/jpeg;base64,${this.arrayBufferToBase64(buffer)}`;\n\n        // Set the source of the image element\n        this.setState({ imageData });\n      });\n    }\n  }\n\n  arrayBufferToBase64(buffer) {\n    let binary = '';\n    const bytes = new Uint8Array(buffer);\n    const len = bytes.byteLength;\n\n    for (let i = 0; i < len; i++) {\n      binary += String.fromCharCode(bytes[i]);\n    }\n\n    return btoa(binary);\n  }\n\n  render() {\n    const { imageData } = this.state;\n\n    return (\n      <div>\n        <div>\n          {imageData && <img src={imageData} alt=\"Raw Image\" />}\n          {!imageData && <p>No image data received</p>}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default RawImageDisplay;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAO,KAAKC,MAAM,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,MAAMC,eAAe,SAASJ,SAAS,CAAC;EAAAK,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAAA,KACtCC,KAAK,GAAG;MACNC,GAAG,EAAE,IAAI;MACTC,SAAS,EAAE;IACb,CAAC;EAAA;EAEDC,iBAAiBA,CAAA,EAAG;IAClB,IAAI,CAACC,cAAc,CAAC,CAAC;IACrB,IAAI,CAACC,mBAAmB,CAAC,CAAC;EAC5B;EAEAD,cAAcA,CAAA,EAAG;IACf,MAAMH,GAAG,GAAG,IAAIP,MAAM,CAACY,GAAG,CAAC,CAAC;IAE5BL,GAAG,CAACM,EAAE,CAAC,OAAO,EAAGC,KAAK,IAAK;MACzBC,OAAO,CAACD,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;IACpC,CAAC,CAAC;IAEF,IAAI;MACFP,GAAG,CAACS,OAAO,CAAC,qBAAqB,CAAC,CAAC,CAAC;IACtC,CAAC,CAAC,OAAOF,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0DAA0D,CAAC;IAC3E;IAEA,IAAI,CAACG,QAAQ,CAAC;MAAEV;IAAI,CAAC,CAAC;EACxB;EAEAI,mBAAmBA,CAAA,EAAG;IACpB,MAAM;MAAEJ;IAAI,CAAC,GAAG,IAAI,CAACD,KAAK;IAE1B,IAAIC,GAAG,EAAE;MACP,MAAMW,UAAU,GAAG,IAAIlB,MAAM,CAACmB,KAAK,CAAC;QAClCZ,GAAG;QACHa,IAAI,EAAE,mBAAmB;QACzBC,WAAW,EAAE;MACf,CAAC,CAAC;MAEFH,UAAU,CAACI,SAAS,CAAEC,OAAO,IAAK;QAChC,MAAMC,MAAM,GAAGD,OAAO,CAACE,IAAI;QAC3B,MAAMjB,SAAS,GAAI,0BAAyB,IAAI,CAACkB,mBAAmB,CAACF,MAAM,CAAE,EAAC;;QAE9E;QACA,IAAI,CAACP,QAAQ,CAAC;UAAET;QAAU,CAAC,CAAC;MAC9B,CAAC,CAAC;IACJ;EACF;EAEAkB,mBAAmBA,CAACF,MAAM,EAAE;IAC1B,IAAIG,MAAM,GAAG,EAAE;IACf,MAAMC,KAAK,GAAG,IAAIC,UAAU,CAACL,MAAM,CAAC;IACpC,MAAMM,GAAG,GAAGF,KAAK,CAACG,UAAU;IAE5B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,GAAG,EAAEE,CAAC,EAAE,EAAE;MAC5BL,MAAM,IAAIM,MAAM,CAACC,YAAY,CAACN,KAAK,CAACI,CAAC,CAAC,CAAC;IACzC;IAEA,OAAOG,IAAI,CAACR,MAAM,CAAC;EACrB;EAEAS,MAAMA,CAAA,EAAG;IACP,MAAM;MAAE5B;IAAU,CAAC,GAAG,IAAI,CAACF,KAAK;IAEhC,oBACEJ,OAAA;MAAAmC,QAAA,eACEnC,OAAA;QAAAmC,QAAA,GACG7B,SAAS,iBAAIN,OAAA;UAAKoC,GAAG,EAAE9B,SAAU;UAAC+B,GAAG,EAAC;QAAW;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,EACpD,CAACnC,SAAS,iBAAIN,OAAA;UAAAmC,QAAA,EAAG;QAAsB;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAEV;AACF;AAEA,eAAexC,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}