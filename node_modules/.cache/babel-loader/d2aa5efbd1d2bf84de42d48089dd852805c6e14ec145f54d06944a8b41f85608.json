{"ast":null,"code":"var _jsxFileName = \"/home/mohit/Downloads/AMRbot_dashboard/src/components/Map2.jsx\";\nimport React, { Component } from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport Config from \"../scripts/config\";\nimport * as ROSLIB from 'roslib';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass RobotState extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      ros: null,\n      imageData: null\n    };\n  }\n  componentDidMount() {\n    this.initConnection();\n    this.viewRawImage();\n  }\n  initConnection() {\n    this.setState({\n      ros: new window.ROSLIB.Ros()\n    });\n    this.state.ros.on(\"error\", error => {\n      console.error(\"ROS Error:\", error);\n    });\n    try {\n      this.state.ros.connect(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT);\n    } catch (error) {\n      console.error(\"ws://\" + Config.ROSBRIDGE_SERVER_IP + \":\" + Config.ROSBRIDGE_SERVER_PORT);\n      console.error(\"Cannot connect to the WS robot. Try again after 1 second\");\n    }\n  }\n  viewRawImage() {\n    const imageTopic = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: \"/your_image_topic\",\n      // Replace with your actual image topic\n      messageType: \"sensor_msgs/Image\"\n    });\n    imageTopic.subscribe(message => {\n      // Assuming you have an HTML image element with id 'rawImage' to display the image\n      const imageElement = document.getElementById(\"rawImage\");\n\n      // Assuming the raw image data is in the 'data' field of the 'message'\n      const imageData = `data:image/jpeg;base64,${message.data}`;\n\n      // Set the source of the image element\n      imageElement.src = imageData;\n\n      // Update the state with the raw image data\n      this.setState({\n        imageData\n      });\n    });\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"rawImageContainer\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          id: \"rawImage\",\n          alt: \"Raw Image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default RobotState;","map":{"version":3,"names":["React","Component","Row","Col","Config","ROSLIB","jsxDEV","_jsxDEV","RobotState","constructor","args","state","ros","imageData","componentDidMount","initConnection","viewRawImage","setState","window","Ros","on","error","console","connect","ROSBRIDGE_SERVER_IP","ROSBRIDGE_SERVER_PORT","imageTopic","Topic","name","messageType","subscribe","message","imageElement","document","getElementById","data","src","render","children","id","alt","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/home/mohit/Downloads/AMRbot_dashboard/src/components/Map2.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport Config from \"../scripts/config\";\nimport * as ROSLIB from 'roslib';\n\nclass RobotState extends Component {\n  state = {\n    ros: null,\n    imageData: null,\n  };\n\n  componentDidMount() {\n    this.initConnection();\n    this.viewRawImage();\n  }\n\n  initConnection() {\n    this.setState({ ros: new window.ROSLIB.Ros() });\n\n    this.state.ros.on(\"error\", (error) => {\n      console.error(\"ROS Error:\", error);\n    });\n\n    try {\n      this.state.ros.connect(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT\n      );\n    } catch (error) {\n      console.error(\n        \"ws://\" +\n          Config.ROSBRIDGE_SERVER_IP +\n          \":\" +\n          Config.ROSBRIDGE_SERVER_PORT\n      );\n      console.error(\"Cannot connect to the WS robot. Try again after 1 second\");\n    }\n  }\n\n  viewRawImage() {\n    const imageTopic = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: \"/your_image_topic\", // Replace with your actual image topic\n      messageType: \"sensor_msgs/Image\",\n    });\n\n    imageTopic.subscribe((message) => {\n      // Assuming you have an HTML image element with id 'rawImage' to display the image\n      const imageElement = document.getElementById(\"rawImage\");\n      \n      // Assuming the raw image data is in the 'data' field of the 'message'\n      const imageData = `data:image/jpeg;base64,${message.data}`;\n      \n      // Set the source of the image element\n      imageElement.src = imageData;\n\n      // Update the state with the raw image data\n      this.setState({ imageData });\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div id=\"rawImageContainer\">\n          <img id=\"rawImage\" alt=\"Raw Image\" />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default RobotState;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,GAAG,EAAEC,GAAG,QAAQ,iBAAiB;AAC1C,OAAOC,MAAM,MAAM,mBAAmB;AACtC,OAAO,KAAKC,MAAM,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,MAAMC,UAAU,SAASP,SAAS,CAAC;EAAAQ,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAAA,KACjCC,KAAK,GAAG;MACNC,GAAG,EAAE,IAAI;MACTC,SAAS,EAAE;IACb,CAAC;EAAA;EAEDC,iBAAiBA,CAAA,EAAG;IAClB,IAAI,CAACC,cAAc,CAAC,CAAC;IACrB,IAAI,CAACC,YAAY,CAAC,CAAC;EACrB;EAEAD,cAAcA,CAAA,EAAG;IACf,IAAI,CAACE,QAAQ,CAAC;MAAEL,GAAG,EAAE,IAAIM,MAAM,CAACb,MAAM,CAACc,GAAG,CAAC;IAAE,CAAC,CAAC;IAE/C,IAAI,CAACR,KAAK,CAACC,GAAG,CAACQ,EAAE,CAAC,OAAO,EAAGC,KAAK,IAAK;MACpCC,OAAO,CAACD,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;IACpC,CAAC,CAAC;IAEF,IAAI;MACF,IAAI,CAACV,KAAK,CAACC,GAAG,CAACW,OAAO,CACpB,OAAO,GACLnB,MAAM,CAACoB,mBAAmB,GAC1B,GAAG,GACHpB,MAAM,CAACqB,qBACX,CAAC;IACH,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CACX,OAAO,GACLjB,MAAM,CAACoB,mBAAmB,GAC1B,GAAG,GACHpB,MAAM,CAACqB,qBACX,CAAC;MACDH,OAAO,CAACD,KAAK,CAAC,0DAA0D,CAAC;IAC3E;EACF;EAEAL,YAAYA,CAAA,EAAG;IACb,MAAMU,UAAU,GAAG,IAAIR,MAAM,CAACb,MAAM,CAACsB,KAAK,CAAC;MACzCf,GAAG,EAAE,IAAI,CAACD,KAAK,CAACC,GAAG;MACnBgB,IAAI,EAAE,mBAAmB;MAAE;MAC3BC,WAAW,EAAE;IACf,CAAC,CAAC;IAEFH,UAAU,CAACI,SAAS,CAAEC,OAAO,IAAK;MAChC;MACA,MAAMC,YAAY,GAAGC,QAAQ,CAACC,cAAc,CAAC,UAAU,CAAC;;MAExD;MACA,MAAMrB,SAAS,GAAI,0BAAyBkB,OAAO,CAACI,IAAK,EAAC;;MAE1D;MACAH,YAAY,CAACI,GAAG,GAAGvB,SAAS;;MAE5B;MACA,IAAI,CAACI,QAAQ,CAAC;QAAEJ;MAAU,CAAC,CAAC;IAC9B,CAAC,CAAC;EACJ;EAEAwB,MAAMA,CAAA,EAAG;IACP,oBACE9B,OAAA;MAAA+B,QAAA,eACE/B,OAAA;QAAKgC,EAAE,EAAC,mBAAmB;QAAAD,QAAA,eACzB/B,OAAA;UAAKgC,EAAE,EAAC,UAAU;UAACC,GAAG,EAAC;QAAW;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAEV;AACF;AAEA,eAAepC,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}