{"ast":null,"code":"var _jsxFileName = \"/home/mohit/Downloads/AMRbot_dashboard/src/components/Map2.jsx\";\nimport React, { Component } from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport config from \"../scripts/config\";\nimport * as ROSLIB from 'roslib';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass RobotState extends Component {\n  constructor() {\n    super();\n    this.state = {\n      ros: null\n    };\n    this.state = {\n      ros: new window.ROSLIB.Ros(),\n      connection: false\n    };\n    this.view_map = this.view_map.bind(this);\n  }\n  componentDidMount() {\n    // Don't need to call getRobotState() here since it's already called in the 'connection' event\n    this.initConnection();\n    this.view_map();\n    // Subscribe to the /map topic\n    const mapTopic = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: \"/map\",\n      messageType: \"nav_msgs/OccupancyGrid\"\n    });\n    mapTopic.subscribe(message => {\n      // Log received map data to the console\n      console.log(\"Received Map Data: \", message);\n      console.log(\"haare krishna\");\n    });\n  }\n  initConnection() {\n    const {\n      ros\n    } = this.state;\n    try {\n      ros.connect('ws://' + config.ROSBRIDGE_SERVER_IP + ':9090');\n      ros.on('connection', () => {\n        console.log('Connected to ROS Bridge.');\n        // this.setState({ connection: true });\n      });\n\n      ros.on('close', () => {\n        console.log('Connection to ROS Bridge closed.');\n        // this.setState({ connection: false });\n      });\n\n      ros.on('error', error => {\n        console.error('Error connecting to ROS Bridge:', error);\n      });\n    } catch (error) {\n      console.error('Error connecting to ROS Bridge:', error);\n    }\n  }\n  view_map() {\n    var viewer = new window.ROS2D.Viewer({\n      divID: \"nav_div3\",\n      width: 155,\n      height: 299\n    });\n    var navClient = new window.NAV2D.OccupancyGridClientNav({\n      ros: this.state.ros,\n      rootObject: viewer.scene,\n      viewer: viewer,\n      serverName: \"/move_base\",\n      // Correct the property name here\n      withOrientation: true\n    });\n  }\n\n  // ... your existing methods\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"nav_div3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default RobotState;","map":{"version":3,"names":["React","Component","Row","Col","config","ROSLIB","jsxDEV","_jsxDEV","RobotState","constructor","state","ros","window","Ros","connection","view_map","bind","componentDidMount","initConnection","mapTopic","Topic","name","messageType","subscribe","message","console","log","connect","ROSBRIDGE_SERVER_IP","on","error","viewer","ROS2D","Viewer","divID","width","height","navClient","NAV2D","OccupancyGridClientNav","rootObject","scene","serverName","withOrientation","render","children","id","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/home/mohit/Downloads/AMRbot_dashboard/src/components/Map2.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport config from \"../scripts/config\";\nimport * as ROSLIB from 'roslib';\n\n\n\nclass RobotState extends Component {\n  state={\n    ros:null,\n  };\n\n  constructor(){\n    super();\n    this.state = {\n      ros: new window.ROSLIB.Ros(),\n      connection: false,\n    };\n    this.view_map=this.view_map.bind(this)\n\n   \n  }\n  componentDidMount() {\n    // Don't need to call getRobotState() here since it's already called in the 'connection' event\n    this.initConnection();\n    this.view_map();\n     // Subscribe to the /map topic\n     const mapTopic = new window.ROSLIB.Topic({\n      ros: this.state.ros,\n      name: \"/map\",\n      messageType: \"nav_msgs/OccupancyGrid\",\n    });\n\n    mapTopic.subscribe((message) => {\n      // Log received map data to the console\n      console.log(\"Received Map Data: \", message);\n      console.log(\"haare krishna\");\n    });\n  }\n\n\n \n  initConnection(){\n    const { ros } = this.state;\n\n    try {\n      ros.connect('ws://'+config.ROSBRIDGE_SERVER_IP+':9090');\n\n      ros.on('connection', () => {\n        console.log('Connected to ROS Bridge.');\n        // this.setState({ connection: true });\n      });\n\n      ros.on('close', () => {\n        console.log('Connection to ROS Bridge closed.');\n        // this.setState({ connection: false });\n      });\n\n      ros.on('error', (error) => {\n        console.error('Error connecting to ROS Bridge:', error);\n      });\n    } catch (error) {\n      console.error('Error connecting to ROS Bridge:', error);\n    }\n  }\n\n\n  \n  view_map(){\n    var viewer=new window.ROS2D.Viewer({\n      divID:\"nav_div3\",\n      width:155,\n      height:299,\n    });\n    var navClient = new window.NAV2D.OccupancyGridClientNav({\n      ros: this.state.ros,\n      rootObject: viewer.scene,\n      viewer: viewer,\n      serverName: \"/move_base\",// Correct the property name here\n      withOrientation: true,\n    });\n    \n    \n    \n  }\n\n\n  // ... your existing methods\n\n  render() {\n    return (\n      <div>\n        <div id=\"nav_div3\"></div>\n      </div>\n    );\n  }\n}\n\nexport default RobotState;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}